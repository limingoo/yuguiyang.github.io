<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>于贵洋的博客</title>
  <subtitle>BI、数据分析</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuguiyang.github.io/"/>
  <updated>2017-08-29T14:48:43.744Z</updated>
  <id>https://yuguiyang.github.io/</id>
  
  <author>
    <name>于贵洋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移整理中(置顶)</title>
    <link href="https://yuguiyang.github.io/2017/12/31/top/"/>
    <id>https://yuguiyang.github.io/2017/12/31/top/</id>
    <published>2017-12-31T13:59:00.000Z</published>
    <updated>2017-08-29T14:48:43.744Z</updated>
    
    <content type="html"><![CDATA[<p>Hi，欢迎访问我的博客。最近正在迁移文章到这里，不定时更新中，请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi，欢迎访问我的博客。最近正在迁移文章到这里，不定时更新中，请期待。&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="https://yuguiyang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://yuguiyang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>数据分析案例-购物篮分析</title>
    <link href="https://yuguiyang.github.io/2017/09/01/data-analyst-method-01/"/>
    <id>https://yuguiyang.github.io/2017/09/01/data-analyst-method-01/</id>
    <published>2017-09-01T01:11:00.000Z</published>
    <updated>2017-09-01T02:36:46.335Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析案例</p>
<blockquote>
<p>说到数据分析、数据挖掘，我们首先想到的可能就是沃尔玛那个“啤酒与尿布”的故事，它告诉我们，世间万物都有着千丝万缕的联系。这其中使用的数据分析方法就是“关联分析”。</p>
</blockquote>
<h1 id="什么是购物篮分析"><a href="#什么是购物篮分析" class="headerlink" title="什么是购物篮分析"></a>什么是购物篮分析</h1><p>购物篮分析（Market Basket Analysis），购物篮就是我们去超市使用的篮子，结账的时候，购物篮中所有的商品都会被一起结算。所谓的购物篮分析就是通过购物篮子所反应的信息来==研究顾客的购买行为==</p>
<a id="more"></a>
<p>关联分析要解决的问题是：一群用户购买了很多产品之后，哪些产品同时购买的几率比较高？买A产品的同时，买哪个产品的几率比较高</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-method-01.png-blog.photo" alt="data-analyst-method-01-01"></p>
<p>这里介绍完概念，暂时还没啥写的，后面再补充下怎样实现，这里会有一个Tableau的简单购物篮分析。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>上文的部分理论知识，摘自下面的博客</p>
<p><a href="http://www.17bigdata.com/%E5%A4%9A%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B-%E8%B4%AD%E7%89%A9%E7%AF%AE%E5%88%86%E6%9E%90.html" target="_blank" rel="external">一起大数据</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据分析案例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说到数据分析、数据挖掘，我们首先想到的可能就是沃尔玛那个“啤酒与尿布”的故事，它告诉我们，世间万物都有着千丝万缕的联系。这其中使用的数据分析方法就是“关联分析”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是购物篮分析&quot;&gt;&lt;a href=&quot;#什么是购物篮分析&quot; class=&quot;headerlink&quot; title=&quot;什么是购物篮分析&quot;&gt;&lt;/a&gt;什么是购物篮分析&lt;/h1&gt;&lt;p&gt;购物篮分析（Market Basket Analysis），购物篮就是我们去超市使用的篮子，结账的时候，购物篮中所有的商品都会被一起结算。所谓的购物篮分析就是通过购物篮子所反应的信息来==研究顾客的购买行为==&lt;/p&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://yuguiyang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="购物篮分析" scheme="https://yuguiyang.github.io/tags/%E8%B4%AD%E7%89%A9%E7%AF%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-数据分析实战(1、2章)</title>
    <link href="https://yuguiyang.github.io/2017/09/01/reading_notes_data_analysis_01/"/>
    <id>https://yuguiyang.github.io/2017/09/01/reading_notes_data_analysis_01/</id>
    <published>2017-08-31T16:59:00.000Z</published>
    <updated>2017-08-31T16:58:22.936Z</updated>
    
    <content type="html"><![CDATA[<p> 读书笔记</p>
<blockquote>
<p>《数据分析实战》 </p>
</blockquote>
<h1 id="1-什么是数据科学家"><a href="#1-什么是数据科学家" class="headerlink" title="1. 什么是数据科学家"></a>1. 什么是数据科学家</h1><p>书中通过“什么是数据”和“数据在商业中的应用”，推导出数据科学家的定义。</p>
<blockquote>
<p>人们通过观测数据来推测出某种因果关系，再用这种因果关系来预测未来或者控制原因以达到预期的结果。把从事这种工作的人成为数据科学家。<br>– 书中摘录</p>
</blockquote>
<p>上面的定义觉得不是很清晰，就百度上找了找：</p>
<blockquote>
<p>数据科学家是指能采用科学方法、运用数据挖掘工具对复杂多量的数字、符号、文字、网址、音频或视频等信息进行数字化重现与认识，并能寻找新的数据洞察的工程师或专家(不同于统计学家或分析师)。一个优秀的数据科学家需要具备的素质有：懂数据采集、懂数学算法、懂数学软件、懂数据分析、懂预测分析、懂市场应用、懂决策分析等。<br>– 百度百科</p>
</blockquote>
<p>我觉得数据科学家就是对于数据相关的所有门类都有一个整体的认识，感觉是个“杂家”，精通算法、什么深度学习、机器学习、AI之类的都是信手拈来，对我就是神一样的存在了，努力吧，同学。</p>
<a id="more"></a>
<h1 id="2-3中类型的数据科学家"><a href="#2-3中类型的数据科学家" class="headerlink" title="2. 3中类型的数据科学家"></a>2. 3中类型的数据科学家</h1><p>书中将数据科学家分成了3类，主要从所在领域分类：</p>
<ul>
<li>商业领域出身</li>
<li>统计学出身</li>
<li>工程领域出身</li>
</ul>
<p>这应该也是数据科学家成长的3条路线，从不同的路线出发，最终殊途同归。当然，这3个领域需要综合，才称得上是合格的数据科学家。</p>
<p>书中的技能配图，可以瞻仰下</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/reading_notes_data_analysis_01_01.png-blog.photo" alt="reading_notes_data_analysis_01_01.png"></p>
<h1 id="数据分析的5个流程"><a href="#数据分析的5个流程" class="headerlink" title="数据分析的5个流程"></a>数据分析的5个流程</h1><p>书中，将数据分析分为5个步骤，看完后，感觉很靠谱，真的很实用，这里分享下</p>
<p>商业数据分析的目的是解决问题，要解决问题，需要使用统计分析、机器学习、数据挖掘等各种方法。</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/reading_notes_data_analysis_01_02.png-blog.photo" alt="reading_notes_data_analysis_01_02.png"></p>
<h2 id="现状和预期"><a href="#现状和预期" class="headerlink" title="现状和预期"></a>现状和预期</h2><p>首先我们要确认“什么才是数据分析中的问题”。<br>比如，“某种商品销售额下降”，这是一个现象，但它是不是一个问题呢？<br>如果，该产品不是公司主打商品，并且就要下架了，那销售额下降并不是一个问题，或者，该商品处于正常的波动，或是季节、市场环境的外部因素导致的，可能都不是一个问题；<br>相反，如果该商品是公司主打商品，并且没有其他外部因素导致，那销售额下降就是个问题了。</p>
<p>这里记录下，其实，还需要确认下，销售额取数逻辑是否有问题，确保数据没有问题，并且要知道这个下降是怎么定义的，是和什么商品，或时间段对比发现下降的。</p>
<p>有对比，才会有差距，既然下降了，说明他心里一定有个预期，即现状和预期之间是有差距的</p>
<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>有了上面的“现状和预期”，我们需要区别”现象和问题“。<br>像“销售额下降”，“顾客流失”，这都是一个现象，我们需要从中去发现问题</p>
<table>
<thead>
<tr>
<th>现象</th>
<th>前提</th>
<th>预期</th>
<th>是否有问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>销售额下降</td>
<td>销售额比例低</td>
<td>维持现状</td>
<td>无</td>
</tr>
<tr>
<td>销售额下降</td>
<td>销售额比例高</td>
<td>将销售额恢复到良好状态</td>
<td>有</td>
</tr>
<tr>
<td>销售额上升</td>
<td>广告费用高</td>
<td>降低广告费用</td>
<td>有</td>
</tr>
<tr>
<td>销售额上升</td>
<td>广告费用适当</td>
<td>维持现状</td>
<td>无</td>
</tr>
</tbody>
</table>
<h3 id="从3个角度发现问题"><a href="#从3个角度发现问题" class="headerlink" title="从3个角度发现问题"></a>从3个角度发现问题</h3><p>发现问题的关键是思考并理解现状和预期之间的差距。<br>那怎样发现、理解这个差距呢？</p>
<h4 id="观察数据大小"><a href="#观察数据大小" class="headerlink" title="观察数据大小"></a>观察数据大小</h4><p>首先考虑有哪些因素会导致这些差距，并明确这些因素的影响程度大小，即找到影响最大的因素。</p>
<h4 id="将数据分解后观察"><a href="#将数据分解后观察" class="headerlink" title="将数据分解后观察"></a>将数据分解后观察</h4><p>指从多个角度观察发生的现象，分解出构成这种现象的因素。在分解的时候，必须遵循MECE原则：</p>
<ul>
<li>Mutually 相互性</li>
<li>Exclusive 排重性</li>
<li>Collectively 完整性</li>
<li>Exhaustive 全面性</li>
</ul>
<p>我感觉这个很抽象，不是很理解，书上有一个例子，说的还不错，<br>常用的拆分方法是因数分解，比如：</p>
<p>销售额=人均销售额*购买人数</p>
<p>拆解后，找到容易调控的因子，才方面后面去解决问题</p>
<h4 id="将数据比较后观察"><a href="#将数据比较后观察" class="headerlink" title="将数据比较后观察"></a>将数据比较后观察</h4><p>指的是将发生问题是的数据和没发生问题时的数据相互比较，并找出问题出现的原因。<br>比如，按时间对比，看看同比、环比（使用时间序列）</p>
<ul>
<li>昨天和今天比较</li>
<li>上周和本周比较</li>
<li><p>同一个商业活动前、后比较</p>
</li>
<li><p>与竞争对手数据比较</p>
</li>
<li><p>公司内部服务之间利益比较</p>
</li>
<li><p>年龄段差异</p>
</li>
<li>性别差异</li>
<li>地域差异</li>
</ul>
<h2 id="数据收集和整理"><a href="#数据收集和整理" class="headerlink" title="数据收集和整理"></a>数据收集和整理</h2><p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 读书笔记&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《数据分析实战》 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-什么是数据科学家&quot;&gt;&lt;a href=&quot;#1-什么是数据科学家&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是数据科学家&quot;&gt;&lt;/a&gt;1. 什么是数据科学家&lt;/h1&gt;&lt;p&gt;书中通过“什么是数据”和“数据在商业中的应用”，推导出数据科学家的定义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们通过观测数据来推测出某种因果关系，再用这种因果关系来预测未来或者控制原因以达到预期的结果。把从事这种工作的人成为数据科学家。&lt;br&gt;– 书中摘录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的定义觉得不是很清晰，就百度上找了找：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据科学家是指能采用科学方法、运用数据挖掘工具对复杂多量的数字、符号、文字、网址、音频或视频等信息进行数字化重现与认识，并能寻找新的数据洞察的工程师或专家(不同于统计学家或分析师)。一个优秀的数据科学家需要具备的素质有：懂数据采集、懂数学算法、懂数学软件、懂数据分析、懂预测分析、懂市场应用、懂决策分析等。&lt;br&gt;– 百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得数据科学家就是对于数据相关的所有门类都有一个整体的认识，感觉是个“杂家”，精通算法、什么深度学习、机器学习、AI之类的都是信手拈来，对我就是神一样的存在了，努力吧，同学。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://yuguiyang.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据分析" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="读书笔记" scheme="https://yuguiyang.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="实例" scheme="https://yuguiyang.github.io/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQL笔试题-连续登录天数</title>
    <link href="https://yuguiyang.github.io/2017/08/31/data-analyst-interview-sql-03/"/>
    <id>https://yuguiyang.github.io/2017/08/31/data-analyst-interview-sql-03/</id>
    <published>2017-08-31T05:11:00.000Z</published>
    <updated>2017-08-31T07:41:57.077Z</updated>
    
    <content type="html"><![CDATA[<p>SQL笔试题</p>
<blockquote>
<p>下面的SQL基于PostgreSQL</p>
</blockquote>
<h1 id="1-用户连续登录天数"><a href="#1-用户连续登录天数" class="headerlink" title="1.用户连续登录天数"></a>1.用户连续登录天数</h1><h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><p>现在我们有一张用户登录日志表，记录用户每天的登录时间，我们想要统计一下，用户每次连续登录的开始日期和结束日期，以及连续登录天数。</p>
<table>
<thead>
<tr>
<th>用户ID</th>
<th>登录日期</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>2017-01-01</td>
</tr>
<tr>
<td>1001</td>
<td>2017-01-02</td>
</tr>
<tr>
<td>1001</td>
<td>2017-01-04</td>
</tr>
<tr>
<td>1001</td>
<td>2017-01-06</td>
</tr>
<tr>
<td>1002</td>
<td>2017-01-02</td>
</tr>
<tr>
<td>1002</td>
<td>2017-01-03</td>
</tr>
</tbody>
</table>
<p>同学们先思考下，整理下思路，如果没有思路或者某几个点不了解，就可以继续往下看了。</p>
<a id="more"></a>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> interview.tm_login_log</div><div class="line">(</div><div class="line">  user_id <span class="built_in">integer</span>,</div><div class="line">  login_date <span class="built_in">date</span></div><div class="line">)</div><div class="line"><span class="keyword">WITH</span> (</div><div class="line">  OIDS=<span class="literal">FALSE</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- 这里的数据是最简化的情况，每个用户每天只有一条登录信息，</span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-01'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-02'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-04'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-05'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-06'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-07'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-08'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-09'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-10'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-12'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-13'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-15'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'2017-01-16'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-01'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-02'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-03'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-04'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-05'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-06'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-07'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-08'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-09'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-10'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-11'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-12'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-13'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-16'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_login_log <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'2017-01-17'</span>);</div></pre></td></tr></table></figure>
<h2 id="步骤拆解"><a href="#步骤拆解" class="headerlink" title="步骤拆解"></a>步骤拆解</h2><p>我们首先要思考，怎样才算连续登录呢？就是1号登录，2号也登录了，这样就连续2天登录，那我们怎么知道2号他有没有登录呢？<br>一种思路是根据排序来判断：<br>我们来根据日期来排个名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	user_id,</div><div class="line">	login_date,</div><div class="line">	row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date) day_rank</div><div class="line"><span class="keyword">from</span> </div><div class="line">	interview.tm_login_log</div><div class="line">;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-03-01.png-blog.photo" alt="data-analyst-interview-sql-03-01"></p>
<p>现在，我们根据用户ID，对他的登录日期做了排序，但是我们还是没有办法知道，他是不是连续的。<br>我们根据这个排序再思考一下，对于一个用户来说，他的登录日期排序已经是连续的了，如果登录日期也是个数字，那我们根据每行的差值，就可以判断登录日期是否连续了。<br>我们换个角度，我们找一个起始日期，来计算一个相差的天数，用它去和排序相对比，就可以了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	user_id,</div><div class="line">	login_date,</div><div class="line">	date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>) day_interval, <span class="comment">-- 间隔天数</span></div><div class="line">	row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date) day_rank <span class="comment">-- 日期排序</span></div><div class="line"><span class="keyword">from</span> </div><div class="line">	interview.tm_login_log</div><div class="line">;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-03-02.png-blog.photo" alt="data-analyst-interview-sql-03-02"></p>
<p>我们观察下数据，因为日期排序是连续的，我们统计的间隔天数都是一个起始日期，所以，如果登录日期是连续的，那么，排序-间隔天数的差值也应该是一样的</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	user_id,</div><div class="line">	login_date,</div><div class="line">	date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>) day_interval, <span class="comment">-- 间隔天数</span></div><div class="line">	row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date) day_rank, <span class="comment">-- 日期排序</span></div><div class="line">	(</div><div class="line">		row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date)</div><div class="line">	) - (</div><div class="line">		date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>)</div><div class="line">	) diff_value</div><div class="line"><span class="keyword">from</span> </div><div class="line">	interview.tm_login_log</div><div class="line">;</div></pre></td></tr></table></figure>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-03-03.png-blog.photo" alt="data-analyst-interview-sql-03-03"></p>
<p>差值一样的记录，就是连续登录的日期</p>
<p>好了，连续登录的判断标准，我们已经确定了，下面就是把题目中要的数据查出来即可<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">select</span> </div><div class="line">	user_id,</div><div class="line">	<span class="comment">--diff_value, --差值</span></div><div class="line">	<span class="keyword">min</span>(login_date) start_date, <span class="comment">--开始日期</span></div><div class="line">	<span class="keyword">max</span>(login_date) end_date, <span class="comment">--结束日期</span></div><div class="line">	<span class="keyword">count</span>(<span class="number">1</span>) running_days <span class="comment">--连续登录天数</span></div><div class="line"><span class="keyword">from</span> (</div><div class="line">	<span class="keyword">select</span> </div><div class="line">		user_id,</div><div class="line">		login_date,</div><div class="line">		date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>) day_interval, <span class="comment">-- 间隔天数</span></div><div class="line">		row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date) day_rank, <span class="comment">-- 日期排序</span></div><div class="line">		(</div><div class="line">			row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date)</div><div class="line">		) - (</div><div class="line">			date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>)</div><div class="line">		) diff_value</div><div class="line">	<span class="keyword">from</span> </div><div class="line">		interview.tm_login_log</div><div class="line">) base</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id,diff_value</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> user_id,start_date</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-03-05.png-blog.photo" alt="data-analyst-interview-sql-03-05"></p>
<h3 id="拓展：获取用户最大的连续登录天数及开始日期和结束日期"><a href="#拓展：获取用户最大的连续登录天数及开始日期和结束日期" class="headerlink" title="拓展：获取用户最大的连续登录天数及开始日期和结束日期"></a>拓展：获取用户最大的连续登录天数及开始日期和结束日期</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">with tmp as (</div><div class="line"><span class="keyword">select</span> </div><div class="line">	user_id,</div><div class="line">	diff_value, <span class="comment">--差值</span></div><div class="line">	<span class="keyword">min</span>(login_date) start_date, <span class="comment">--开始日期</span></div><div class="line">	<span class="keyword">max</span>(login_date) end_date, <span class="comment">--结束日期</span></div><div class="line">	<span class="keyword">count</span>(<span class="number">1</span>) running_days <span class="comment">--连续登录天数</span></div><div class="line"><span class="keyword">from</span> (</div><div class="line">	<span class="keyword">select</span> </div><div class="line">		user_id,</div><div class="line">		login_date,</div><div class="line">		date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>) day_interval, <span class="comment">-- 间隔天数</span></div><div class="line">		row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date) day_rank, <span class="comment">-- 日期排序</span></div><div class="line">		(</div><div class="line">			row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> login_date)</div><div class="line">		) - (</div><div class="line">			date_part(<span class="string">'day'</span>,login_date::<span class="keyword">timestamp</span> - <span class="keyword">timestamp</span><span class="string">'2017-01-01'</span>)</div><div class="line">		) diff_value</div><div class="line">	<span class="keyword">from</span> </div><div class="line">		interview.tm_login_log</div><div class="line">) base</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id,diff_value</div><div class="line">) </div><div class="line"><span class="keyword">select</span> </div><div class="line">	a.user_id,a.start_date,a.end_date,a.running_days</div><div class="line"><span class="keyword">from</span> </div><div class="line">	tmp a</div><div class="line"><span class="keyword">join</span> (</div><div class="line">	<span class="keyword">select</span> user_id,<span class="keyword">max</span>(running_days) running_days <span class="keyword">from</span> tmp <span class="keyword">group</span> <span class="keyword">by</span> user_id</div><div class="line">) b <span class="keyword">on</span> a.user_id = b.user_id</div><div class="line"><span class="keyword">and</span> a.running_days = b.running_days</div><div class="line">;</div></pre></td></tr></table></figure>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-03-04.png-blog.photo" alt="data-analyst-interview-sql-03-04"></p>
<h3 id="连续5天登录用户"><a href="#连续5天登录用户" class="headerlink" title="连续5天登录用户"></a>连续5天登录用户</h3><p>这里补充另一个类似的问题，这里，我们想看连续登录5天的用户，使用上面的方法可以实现，这里介绍一个更快的方法：<br>是使用一个函数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">向前取n位</div><div class="line">lag(value anyelement [, offset integer [, default anyelement ]])</div><div class="line"></div><div class="line"><span class="keyword">select</span> *<span class="keyword">from</span> (</div><div class="line">	<span class="keyword">select</span> </div><div class="line">		a.user_id,</div><div class="line">		a.login_date,</div><div class="line">		<span class="comment">--5天前的登录日期</span></div><div class="line">		lag(a.login_date,<span class="number">4</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> a.user_id <span class="keyword">order</span> <span class="keyword">by</span> a.login_date) pre_five_day </div><div class="line">	<span class="keyword">from</span> interview.tm_login_log a </div><div class="line">)x</div><div class="line"><span class="keyword">where</span> date_part(<span class="string">'day'</span>,x.login_date::<span class="keyword">timestamp</span> - pre_five_day::<span class="keyword">timestamp</span>)=<span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>这样取连续登录的话，比较方便</p>
<h3 id="思考题：连续7天未登录用户"><a href="#思考题：连续7天未登录用户" class="headerlink" title="思考题：连续7天未登录用户"></a>思考题：连续7天未登录用户</h3><p>这里留一个类似的小问题，大家自行练习下</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我们简单整理下思路，上面的例子，我认为主要是一个思路的介绍，核心就是我们要找到一个判断连续的方法，找到方法后，SQL自然就一步一步想出来了。<br>上面只是一种思路，一定还有更优的解法，欢迎大家反馈分享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL笔试题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的SQL基于PostgreSQL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-用户连续登录天数&quot;&gt;&lt;a href=&quot;#1-用户连续登录天数&quot; class=&quot;headerlink&quot; title=&quot;1.用户连续登录天数&quot;&gt;&lt;/a&gt;1.用户连续登录天数&lt;/h1&gt;&lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h2&gt;&lt;p&gt;现在我们有一张用户登录日志表，记录用户每天的登录时间，我们想要统计一下，用户每次连续登录的开始日期和结束日期，以及连续登录天数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用户ID&lt;/th&gt;
&lt;th&gt;登录日期&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;2017-01-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;2017-01-02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;2017-01-04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;2017-01-06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1002&lt;/td&gt;
&lt;td&gt;2017-01-02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1002&lt;/td&gt;
&lt;td&gt;2017-01-03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;同学们先思考下，整理下思路，如果没有思路或者某几个点不了解，就可以继续往下看了。&lt;/p&gt;
    
    </summary>
    
      <category term="笔试题" scheme="https://yuguiyang.github.io/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="SQL" scheme="https://yuguiyang.github.io/tags/SQL/"/>
    
      <category term="笔试题" scheme="https://yuguiyang.github.io/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SQL笔试题-行转列</title>
    <link href="https://yuguiyang.github.io/2017/08/28/data-analyst-interview-sql-02/"/>
    <id>https://yuguiyang.github.io/2017/08/28/data-analyst-interview-sql-02/</id>
    <published>2017-08-28T05:11:00.000Z</published>
    <updated>2017-08-28T05:54:30.181Z</updated>
    
    <content type="html"><![CDATA[<p>SQL笔试题</p>
<blockquote>
<p>下面的SQL基于PostgreSQL</p>
</blockquote>
<h1 id="1-行转列"><a href="#1-行转列" class="headerlink" title="1. 行转列"></a>1. 行转列</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们写SQL的时候，经常会遇到一些列转行、行转列的情况，有的时候是为了展现需要，有的时候是代码里就得这样转一下。总之嘞，得掌握这个技巧。下面就开始我们的练习。</p>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> interview.tm_score</div><div class="line">(</div><div class="line">  stu_name <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">20</span>), <span class="comment">-- 学生名称</span></div><div class="line">  course_name <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">20</span>), <span class="comment">-- 课程名称</span></div><div class="line">  score <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="comment">-- 分数</span></div><div class="line">)</div><div class="line"><span class="keyword">WITH</span> (</div><div class="line">  OIDS=<span class="literal">FALSE</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- 初始化数据</span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'路飞'</span>,<span class="string">'数学'</span>,<span class="number">100</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'路飞'</span>,<span class="string">'语文'</span>,<span class="number">62</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'路飞'</span>,<span class="string">'英语'</span>,<span class="number">98</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'索隆'</span>,<span class="string">'数学'</span>,<span class="number">40</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'索隆'</span>,<span class="string">'语文'</span>,<span class="number">57</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'索隆'</span>,<span class="string">'英语'</span>,<span class="number">40</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'娜美'</span>,<span class="string">'数学'</span>,<span class="number">42</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'娜美'</span>,<span class="string">'语文'</span>,<span class="number">44</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> interview.tm_score <span class="keyword">values</span>(<span class="string">'娜美'</span>,<span class="string">'英语'</span>,<span class="number">28</span>);</div></pre></td></tr></table></figure>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-01.png-blog.photo" alt="data-analyst-interview-sql-02-01"></p>
<a id="more"></a>
<p>我们先来思考第一个问题：<br>我们怎样可以将课程变成列呢，类似交叉表那样？<br>最容易想到的方法，就是使用case when了</p>
<h3 id="case-when"><a href="#case-when" class="headerlink" title="case when"></a>case when</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	stu_name,</div><div class="line">	<span class="keyword">max</span>(<span class="keyword">case</span> course_name <span class="keyword">when</span> <span class="string">'数学'</span> <span class="keyword">then</span> score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"数学"</span>, </div><div class="line">	<span class="keyword">max</span>(<span class="keyword">case</span> course_name <span class="keyword">when</span> <span class="string">'语文'</span> <span class="keyword">then</span> score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"语文"</span>, </div><div class="line">	<span class="keyword">max</span>(<span class="keyword">case</span> course_name <span class="keyword">when</span> <span class="string">'英语'</span> <span class="keyword">then</span> score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">"英语"</span></div><div class="line">	</div><div class="line"><span class="keyword">from</span> </div><div class="line">	interview.tm_score</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> </div><div class="line">	stu_name</div><div class="line">;</div></pre></td></tr></table></figure>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-02.png-blog.photo" alt="data-analyst-interview-sql-02-02"></p>
<h3 id="crosstab"><a href="#crosstab" class="headerlink" title="crosstab"></a>crosstab</h3><p>在新版本的PostgreSQL中有一个extension，可以方便的实现行转列<br>我们需要先安装这个扩展，我看了下，PostgreSQL8.3以后的版本都可以安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> extension tablefunc</div></pre></td></tr></table></figure></p>
<blockquote>
<p>官网地址：<a href="https://www.postgresql.org/docs/9.5/static/tablefunc.html" target="_blank" rel="external">https://www.postgresql.org/docs/9.5/static/tablefunc.html</a></p>
</blockquote>
<p>安装完后，会有这么几个函数</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-03.png-blog.photo" alt="data-analyst-interview-sql-02-03"></p>
<p>我们可以使用crosstab来实现上面的行转列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *<span class="keyword">from</span> crosstab(</div><div class="line">	<span class="string">'select stu_name,course_name,score from interview.tm_score'</span></div><div class="line">) <span class="keyword">as</span> ct(stu_name <span class="built_in">varchar</span>(<span class="number">20</span>) ,<span class="string">"数学"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>),<span class="string">"语文"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>), <span class="string">"英语"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>))</div></pre></td></tr></table></figure></p>
<p>结果也是一样的，我们传入一个SQL，SQL里面返回3列（这3列都是默认处理的，第一列是主字段，第2列是要拆成列的字段，第3列是要显示的值），最后因为返回值是record，所以我们要定义一下类型。</p>
<p>这里，顺便看看这个函数的用法</p>
<h4 id="要转成列的字段有Null"><a href="#要转成列的字段有Null" class="headerlink" title="要转成列的字段有Null"></a>要转成列的字段有Null</h4><p>是这样一种情况：不是所有的同学都有3门课程的分数<br>我们删掉了几条记录来模拟<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-04.png-blog.photo" alt="data-analyst-interview-sql-02-04"></p>
<p>这时候使用crosstab，结果会有问题</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-05.png-blog.photo" alt="data-analyst-interview-sql-02-05"></p>
<p>数据会自动从第一列开始，导致错误的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- crosstab(text source_sql, text category_sql)</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> *<span class="keyword">from</span> crosstab(</div><div class="line">	<span class="string">'select stu_name,course_name,score from interview.tm_score'</span>,<span class="string">'select distinct course_name from interview.tm_score'</span></div><div class="line">) <span class="keyword">as</span> ct(stu_name <span class="built_in">varchar</span>(<span class="number">20</span>) ,<span class="string">"数学"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>),<span class="string">"语文"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>), <span class="string">"英语"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>))</div></pre></td></tr></table></figure></p>
<p>这时候，数据就对了</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-06.png-blog.photo" alt="data-analyst-interview-sql-02-06"></p>
<h4 id="source-sql-多于3列"><a href="#source-sql-多于3列" class="headerlink" title="source_sql 多于3列"></a>source_sql 多于3列</h4><p>这种情况是，我们查询的结果不单单有上面说的3列，可能还有其他字段，<br>比如，我们可以在上面的测试数据上加一个班级列<br>我们同样也是使用上面的方式解决</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> interview.tm_score <span class="keyword">add</span> <span class="keyword">column</span> stu_class <span class="built_in">varchar</span>(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">update</span> interview.tm_score <span class="keyword">set</span> stu_class=<span class="string">'一班'</span> <span class="keyword">where</span> stu_name <span class="keyword">in</span> (<span class="string">'路飞'</span>,<span class="string">'索隆'</span>);</div><div class="line"><span class="keyword">update</span> interview.tm_score <span class="keyword">set</span> stu_class=<span class="string">'二班'</span> <span class="keyword">where</span> stu_name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'路飞'</span>,<span class="string">'索隆'</span>);</div><div class="line"></div><div class="line"><span class="keyword">select</span> *<span class="keyword">from</span> crosstab(</div><div class="line">	<span class="string">'select stu_name,stu_class,course_name,score from interview.tm_score'</span>,<span class="string">'select distinct course_name from interview.tm_score'</span></div><div class="line">) <span class="keyword">as</span> ct(stu_name <span class="built_in">varchar</span>(<span class="number">20</span>) ,stu_class <span class="built_in">varchar</span>(<span class="number">10</span>),<span class="string">"数学"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>),<span class="string">"语文"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>), <span class="string">"英语"</span> <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们六个思考题，有这样一组数据：</p>
</blockquote>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-07.png-blog.photo" alt="data-analyst-interview-sql-02-07"></p>
<p>我们想查询出这样格式的数据</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-08.png-blog.photo" alt="data-analyst-interview-sql-02-08"></p>
<p>大家可以练习下这个SQL该怎么写</p>
<h1 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h1><p>我们可以把行转成列，那要怎样把列转成行呢？</p>
<h2 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h2><p>最简单的方法是直接union all,既然要放到一列里面，那字段类型肯定要一样，所以直接根据不同字段去union all 就好了</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> stu_name,<span class="string">"数学"</span> <span class="keyword">from</span> xxx</div><div class="line"><span class="keyword">union</span> all </div><div class="line"><span class="keyword">select</span> stu_name,<span class="string">"语文"</span> <span class="keyword">from</span> xxx</div><div class="line"><span class="keyword">union</span> all</div><div class="line"><span class="keyword">select</span> stu_name,<span class="string">"英语"</span> <span class="keyword">from</span> xxx</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这里简单介绍了几种常见的处理方法，实际使用中，一定还有更好地方法、或一些特殊的问题，欢迎大家分享、反馈。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL笔试题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的SQL基于PostgreSQL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-行转列&quot;&gt;&lt;a href=&quot;#1-行转列&quot; class=&quot;headerlink&quot; title=&quot;1. 行转列&quot;&gt;&lt;/a&gt;1. 行转列&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我们写SQL的时候，经常会遇到一些列转行、行转列的情况，有的时候是为了展现需要，有的时候是代码里就得这样转一下。总之嘞，得掌握这个技巧。下面就开始我们的练习。&lt;/p&gt;
&lt;h2 id=&quot;测试数据&quot;&gt;&lt;a href=&quot;#测试数据&quot; class=&quot;headerlink&quot; title=&quot;测试数据&quot;&gt;&lt;/a&gt;测试数据&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; interview.tm_score&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  stu_name &lt;span class=&quot;built_in&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varying&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;-- 学生名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  course_name &lt;span class=&quot;built_in&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varying&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;-- 课程名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  score &lt;span class=&quot;built_in&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;-- 分数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  OIDS=&lt;span class=&quot;literal&quot;&gt;FALSE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 初始化数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;路飞&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;数学&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;路飞&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;语文&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;62&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;路飞&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;英语&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;98&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;索隆&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;数学&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;索隆&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;语文&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;索隆&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;英语&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;娜美&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;数学&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;娜美&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;语文&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; interview.tm_score &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;娜美&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;英语&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-02-01.png-blog.photo&quot; alt=&quot;data-analyst-interview-sql-02-01&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔试题" scheme="https://yuguiyang.github.io/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="SQL" scheme="https://yuguiyang.github.io/tags/SQL/"/>
    
      <category term="笔试题" scheme="https://yuguiyang.github.io/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SQL笔试题-累计值（月累计、年累计）</title>
    <link href="https://yuguiyang.github.io/2017/08/28/data-analyst-interview-sql-01/"/>
    <id>https://yuguiyang.github.io/2017/08/28/data-analyst-interview-sql-01/</id>
    <published>2017-08-28T03:11:00.000Z</published>
    <updated>2017-08-29T03:04:09.671Z</updated>
    
    <content type="html"><![CDATA[<p>SQL笔试题</p>
<blockquote>
<p>下面的SQL基于PostgreSQL</p>
</blockquote>
<h1 id="1-累计值（月累计、年累计）"><a href="#1-累计值（月累计、年累计）" class="headerlink" title="1. 累计值（月累计、年累计）"></a>1. 累计值（月累计、年累计）</h1><h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><p>比如说，我们有这样一份数据,记录的是图书每天的销量情况：</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>图书名称</th>
<th>销量</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-01-01</td>
<td>解忧杂货店</td>
<td>90</td>
</tr>
<tr>
<td>2017-01-03</td>
<td>解忧杂货店</td>
<td>50</td>
</tr>
<tr>
<td>2017-01-05</td>
<td>解忧杂货店</td>
<td>100</td>
</tr>
<tr>
<td>2017-01-01</td>
<td>雪落香杉树</td>
<td>100</td>
</tr>
<tr>
<td>2017-01-03</td>
<td>雪落香杉树</td>
<td>44</td>
</tr>
<tr>
<td>2017-01-04</td>
<td>雪落香杉树</td>
<td>99</td>
</tr>
</tbody>
</table>
<p>现在，我们要统计每本书，当月的累计销量？即1号是1号的销量，2号是1号+2号当天的销量（注意：这里2号当天虽然没有销量，但是应该为1号的90+2号的0，为90）。大家先思考下，如果可以很快解答，就不需要接着读啦，有疑问的同学可以继续往下看。</p>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 图书的销量表</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> interview.tm_book_sales</div><div class="line">(</div><div class="line">  calendar_date <span class="built_in">date</span>, <span class="comment">-- 日期</span></div><div class="line">  book_name <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">100</span>), <span class="comment">-- 图书名称</span></div><div class="line">  sales <span class="built_in">numeric</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="comment">-- 销量</span></div><div class="line">)</div><div class="line"><span class="keyword">WITH</span> (</div><div class="line">  OIDS=<span class="literal">FALSE</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- 测试数据</span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-01'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">56</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-02'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">100</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-03'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">70</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-06'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">11</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-07'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">65</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-08'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">9</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-09'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-10'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">56</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-01'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">18</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-02'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">40</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-03'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-04'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">22</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-05'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">48</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-07'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">71</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-09'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">73</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-01-10'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">37</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-03'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">5</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-05'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">46</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-06'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">35</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-07'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-09'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-10'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">12</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-13'</span>,<span class="string">'解忧杂货店'</span>,<span class="number">43</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-01'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-04'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">78</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-10'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">50</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tm_book_sales <span class="keyword">values</span>(<span class="string">'2017-02-20'</span>,<span class="string">'雪落香杉树'</span>,<span class="number">93</span>);</div></pre></td></tr></table></figure>
<p>现在呢，我们有了图书每天的销量数据，下面，我们思考1个问题：<br>我想要统计每本图书的当月累计销量，应该怎么做呢？</p>
<a id="more"></a>
<p>如果只是单纯的统计每本书每个月的销量，熟悉SQL的同学，一定可以很快想到<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	to_char(calendar_date,<span class="string">'yyyy-mm'</span>) month_name,</div><div class="line">	book_name,</div><div class="line">	<span class="keyword">sum</span>(sales) </div><div class="line"><span class="keyword">from</span> </div><div class="line">	interview.tm_book_sales </div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span></div><div class="line">	to_char(calendar_date,<span class="string">'yyyy-mm'</span>),</div><div class="line">	book_name</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> </div><div class="line">	book_name,</div><div class="line">	to_char(calendar_date,<span class="string">'yyyy-mm'</span>)</div><div class="line">;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-01-01.png-blog.photo" alt="data-analyst-interview-sql-01-01"></p>
<p>下面，我们来想下，这个月累计怎么做？<br>月累计值，其实就是当天的销量再加上当天之前的销量</p>
<h2 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h2><p>通过 interview.tm_book_sales 表，我们可以获取每一天的销量，那要怎样获取每天历史的销量呢？<br>最简单的方式就是自关联了。<br>其实就是自己和自己去关联，来获取历史的销量<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	t_today.calendar_date,</div><div class="line">	t_today.book_name,</div><div class="line">	<span class="keyword">sum</span>(t_his.sales) sales_mtd</div><div class="line"><span class="keyword">from</span> </div><div class="line">	interview.tm_book_sales t_today</div><div class="line"><span class="keyword">left</span> <span class="keyword">join</span> </div><div class="line">	interview.tm_book_sales t_his</div><div class="line"><span class="keyword">on</span></div><div class="line">	<span class="comment">-- 图书名称相等</span></div><div class="line">	t_his.book_name = t_today.book_name </div><div class="line"><span class="keyword">and</span> </div><div class="line">	<span class="comment">-- 月份相等，只统计当月</span></div><div class="line">	to_char(t_his.calendar_date,<span class="string">'yyyy-mm'</span>) = to_char(t_today.calendar_date,<span class="string">'yyyy-mm'</span>)</div><div class="line"><span class="keyword">and</span></div><div class="line">	<span class="comment">-- 获取当天之前的历史日期</span></div><div class="line">	t_his.calendar_date &lt;= t_today.calendar_date</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span></div><div class="line">	t_today.calendar_date,</div><div class="line">	t_today.book_name</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> </div><div class="line">	t_today.book_name,</div><div class="line">	t_today.calendar_date</div><div class="line">;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-01-02.png-blog.photo" alt="data-analyst-interview-sql-01-02"></p>
<p>好了，上面，我们通过自关联，获取了每本图书的月累计销量，不要太高兴，我们观察下，就会发现些问题。<br>我们看看日期，就会发现，有些日期是没有销量的，比如：《解忧杂货店》2017-01-04，2017-01-05 就没有销量，但实际上，如果是累计值得花，他是应该有数据的，因为1号、2号、3号都有数据，就算4号当天没有销量，月累计也应该要算上前3天的销量，所以我们的SQL并不严谨，还得修改。</p>
<h2 id="补全没有销量的日期"><a href="#补全没有销量的日期" class="headerlink" title="补全没有销量的日期"></a>补全没有销量的日期</h2><p>我们需要想办法补全缺失的日期，如果，t_today里面含有每一天每本书的数据就好了，这就要我们手动构造一个了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> </div><div class="line">	t_day.calendar_date,</div><div class="line">	t_book.book_name</div><div class="line"><span class="keyword">from</span></div><div class="line">    <span class="comment">-- 日期维度表，就是存放每一天</span></div><div class="line">	base.dm_calendar t_day</div><div class="line"><span class="keyword">cross</span> <span class="keyword">join</span> </div><div class="line">    <span class="comment">-- 所有的图书信息</span></div><div class="line">	(<span class="keyword">select</span> <span class="keyword">distinct</span> book_name <span class="keyword">from</span> interview.tm_book_sales) t_book</div><div class="line"><span class="keyword">where</span> </div><div class="line">	t_day.month_id=<span class="number">201701</span></div><div class="line">;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-01-03.png-blog.photo" alt="data-analyst-interview-sql-01-03"></p>
<p>日期维度表的话，其实是数仓中必备的地基础维度中的一个，她里面就是存放了每一天的数据，和其他一些我们会常用的字段，后面写一篇文章详细介绍下。<br>我们通过笛卡尔积，生成了一张包含每一天每本的图书的一个全维度表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">with t_dim as (</div><div class="line">	<span class="keyword">select</span> </div><div class="line">		t_day.calendar_date,</div><div class="line">		t_book.book_name</div><div class="line">	<span class="keyword">from</span> </div><div class="line">		base.dm_calendar t_day</div><div class="line">	<span class="keyword">cross</span> <span class="keyword">join</span> </div><div class="line">		(<span class="keyword">select</span> <span class="keyword">distinct</span> book_name <span class="keyword">from</span> interview.tm_book_sales) t_book</div><div class="line">	<span class="keyword">where</span> </div><div class="line">		t_day.month_id=<span class="number">201701</span></div><div class="line">)</div><div class="line"><span class="keyword">select</span> </div><div class="line">	t_dim.calendar_date,</div><div class="line">	t_dim.book_name,</div><div class="line">	<span class="keyword">sum</span>(t_his.sales) sales_mtd</div><div class="line"><span class="keyword">from</span> </div><div class="line">	t_dim</div><div class="line"><span class="keyword">left</span> <span class="keyword">join</span> 	</div><div class="line">	interview.tm_book_sales t_today</div><div class="line"><span class="keyword">on</span> </div><div class="line">	t_today.calendar_date = t_dim.calendar_date</div><div class="line"><span class="keyword">and</span></div><div class="line">	t_today.book_name = t_dim.book_name</div><div class="line"><span class="keyword">left</span> <span class="keyword">join</span> </div><div class="line">	interview.tm_book_sales t_his</div><div class="line"><span class="keyword">on</span></div><div class="line">	<span class="comment">-- 图书名称相等</span></div><div class="line">	t_his.book_name = t_dim.book_name </div><div class="line"><span class="keyword">and</span> </div><div class="line">	<span class="comment">-- 月份相等，只统计当月</span></div><div class="line">	to_char(t_his.calendar_date,<span class="string">'yyyy-mm'</span>) = to_char(t_dim.calendar_date,<span class="string">'yyyy-mm'</span>)</div><div class="line"><span class="keyword">and</span></div><div class="line">	<span class="comment">-- 获取当天之前的历史日期</span></div><div class="line">	t_his.calendar_date &lt;= t_dim.calendar_date</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span></div><div class="line">	t_dim.calendar_date,</div><div class="line">	t_dim.book_name</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> </div><div class="line">	t_dim.book_name,</div><div class="line">	t_dim.calendar_date</div><div class="line">;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/data-analyst-interview-sql-01-04.png-blog.photo" alt="data-analyst-interview-sql-01-04"></p>
<p>好啦，补全了日期信息后，我们的月累计算是完成了，手工。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单总结下，通过上面的例子，我们要掌握什么呢？<br>首先是对业务的理解，比如上面的月累计的统计方法；然后根据统计方法，使用SQL去实现，一步步完善；还有对日期维度表的一个综合使用。<br>年累计的实现也是一样的，同学们可以自行练习下，有问题可以反馈。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL笔试题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的SQL基于PostgreSQL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-累计值（月累计、年累计）&quot;&gt;&lt;a href=&quot;#1-累计值（月累计、年累计）&quot; class=&quot;headerlink&quot; title=&quot;1. 累计值（月累计、年累计）&quot;&gt;&lt;/a&gt;1. 累计值（月累计、年累计）&lt;/h1&gt;&lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h2&gt;&lt;p&gt;比如说，我们有这样一份数据,记录的是图书每天的销量情况：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;图书名称&lt;/th&gt;
&lt;th&gt;销量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2017-01-01&lt;/td&gt;
&lt;td&gt;解忧杂货店&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017-01-03&lt;/td&gt;
&lt;td&gt;解忧杂货店&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017-01-05&lt;/td&gt;
&lt;td&gt;解忧杂货店&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017-01-01&lt;/td&gt;
&lt;td&gt;雪落香杉树&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017-01-03&lt;/td&gt;
&lt;td&gt;雪落香杉树&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017-01-04&lt;/td&gt;
&lt;td&gt;雪落香杉树&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在，我们要统计每本书，当月的累计销量？即1号是1号的销量，2号是1号+2号当天的销量（注意：这里2号当天虽然没有销量，但是应该为1号的90+2号的0，为90）。大家先思考下，如果可以很快解答，就不需要接着读啦，有疑问的同学可以继续往下看。&lt;/p&gt;
&lt;h2 id=&quot;测试数据&quot;&gt;&lt;a href=&quot;#测试数据&quot; class=&quot;headerlink&quot; title=&quot;测试数据&quot;&gt;&lt;/a&gt;测试数据&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 图书的销量表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; interview.tm_book_sales&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  calendar_date &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;-- 日期&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  book_name &lt;span class=&quot;built_in&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varying&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;-- 图书名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  sales &lt;span class=&quot;built_in&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;-- 销量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  OIDS=&lt;span class=&quot;literal&quot;&gt;FALSE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 测试数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-02&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-03&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-06&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-07&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-08&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-09&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-10&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-02&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-03&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-04&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-05&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-07&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;71&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-09&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;73&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-01-10&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-03&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-05&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;46&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-06&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-07&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-09&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-10&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-13&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;解忧杂货店&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-01&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-04&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;78&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-10&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; tm_book_sales &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;2017-02-20&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;雪落香杉树&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在呢，我们有了图书每天的销量数据，下面，我们思考1个问题：&lt;br&gt;我想要统计每本图书的当月累计销量，应该怎么做呢？&lt;/p&gt;
    
    </summary>
    
      <category term="笔试题" scheme="https://yuguiyang.github.io/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="SQL" scheme="https://yuguiyang.github.io/tags/SQL/"/>
    
      <category term="笔试题" scheme="https://yuguiyang.github.io/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib手册(9) - 绘制动画</title>
    <link href="https://yuguiyang.github.io/2017/08/17/matplotlib-base-flash-09/"/>
    <id>https://yuguiyang.github.io/2017/08/17/matplotlib-base-flash-09/</id>
    <published>2017-08-17T03:11:00.000Z</published>
    <updated>2017-08-31T05:00:22.933Z</updated>
    
    <content type="html"><![CDATA[<p>matplotlib手册(9)</p>
<blockquote>
<p>绘制动画 </p>
</blockquote>
<p>前面，我们介绍了很多绘图的方法，matplotlib不单单可以绘制静态的图，还可以制作动态的图，下面，我们就来学习下。</p>
<blockquote>
<p>我们主要参考matplotlib官网的例子<a href="http://matplotlib.org/api/animation_api.html" target="_blank" rel="external">http://matplotlib.org/api/animation_api.html</a></p>
</blockquote>
<p>创建动画最简单的方式，就是使用Animation的子类,就是下面的这2个</p>
<h1 id="1-FuncAnimation"><a href="#1-FuncAnimation" class="headerlink" title="1. FuncAnimation"></a>1. FuncAnimation</h1><p>函数介绍及主要参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">matplotlib</span>.<span class="title">animation</span>.<span class="title">FuncAnimation</span><span class="params">(fig, func, frames=None, init_func=None, fargs=None, save_count=None, **kwargs)</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">fig</span> :</span> matplotlib.figure.Figure</div><div class="line">func : callable</div><div class="line">frames : iterable, int, generator function, <span class="keyword">or</span> <span class="keyword">None</span>, optional</div><div class="line">init_func : callable, optional</div><div class="line">fargs : tuple <span class="keyword">or</span> <span class="keyword">None</span>, optional</div><div class="line">interval : number, optional</div><div class="line"></div><div class="line">repeat_delay : number, optional</div><div class="line">repeat : bool, optional</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>小栗子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Created on Thu Aug 17 18:19:08 2017</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">@author: yuguiyang</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </div><div class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation </div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime </div><div class="line">  </div><div class="line"></div><div class="line">fig,axes = plt.subplots()  </div><div class="line">axes.plot(np.random.rand(<span class="number">10</span>))  </div><div class="line"></div><div class="line"><span class="comment">#重新绘制图形</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_line</span><span class="params">(data)</span>:</span> </div><div class="line">    print(datetime.now(),<span class="string">'--'</span>,data)</div><div class="line">    <span class="comment">#清空当前轴</span></div><div class="line">    plt.cla()</div><div class="line">    <span class="comment">#重新绘图</span></div><div class="line">    axes.plot(np.random.rand(<span class="number">10</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入的fig中，调用update_line函数，将range(3)作为参数传给update_line，1秒调用一次</span></div><div class="line">ani = animation.FuncAnimation(fig, update_line, <span class="number">3</span>, interval=<span class="number">1000</span>)  </div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>上面的代码，我们定义了一个函数update_line，他会清空axes，并重新绘图；<br>FuncAnimation会每个1秒调用一次这个函数<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/matplotlib-base-flash-09-01.gif-blog.photo" alt="matplotlib-base-flash-09-01"></p>
<p>这里记录一个小问题，暂时还没有解决</p>
<h2 id="frames-参数的问题"><a href="#frames-参数的问题" class="headerlink" title="frames 参数的问题"></a>frames 参数的问题</h2><p>上面的例子里，我们给的是一个常量3，按照官方的介绍，是按照range(3),来一次传给函数的，但实际测试下来，发现他的调用会有问题。<br>我们看下上面的那个输出</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/matplotlib-base-flash-09-03.png-blog.photo" alt="matplotlib-base-flash-09-03"></p>
<hr>
<p>刚刚发现了导致这个问题的原因，注意看这个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">init_func : callable, optional</div><div class="line"></div><div class="line">    A function used to draw a clear frame. If <span class="keyword">not</span> given, the results of drawing <span class="keyword">from</span> the first item <span class="keyword">in</span> the frames sequence will be used. This function will be called once before the first frame.</div></pre></td></tr></table></figure></p>
<p>上面，因为我们没有指定初始化函数，所以导致，会调用一次update_line，用它返回值作为初始状态，我们改下脚本再看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'init'</span>)</div><div class="line">    <span class="comment">#清空当前轴</span></div><div class="line">    plt.cla()</div><div class="line">    </div><div class="line">ani = animation.FuncAnimation(fig, update_line, <span class="number">3</span>, repeat=<span class="keyword">False</span>, interval=<span class="number">3000</span>,init_func=init)</div></pre></td></tr></table></figure></p>
<p>这回输出就正常了，</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/matplotlib-base-flash-09-04.png-blog.photo" alt="matplotlib-base-flash-09-04"></p>
<h2 id="repeat、repeat-delay"><a href="#repeat、repeat-delay" class="headerlink" title="repeat、repeat_delay"></a>repeat、repeat_delay</h2><p>这2个参数一般会配合使用，repeat默认是true，所以上面的例子会一直循环下去，<br>如果我们改为false,第一次循环完之后就会停止。</p>
<h1 id="2-ArtistAnimation"><a href="#2-ArtistAnimation" class="headerlink" title="2. ArtistAnimation"></a>2. ArtistAnimation</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">matplotlib</span>.<span class="title">animation</span>.<span class="title">ArtistAnimation</span><span class="params">(fig, artists, *args, **kwargs)</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">artists</span> :</span> list</div><div class="line"></div><div class="line">    Each list entry a collection of artists that represent what needs to be enabled on each frame. These will be disabled <span class="keyword">for</span> other frames.</div></pre></td></tr></table></figure>
<p>使用起来和上面的差不多，这里不会调用函数，而是传入一个list，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </div><div class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation </div><div class="line">  </div><div class="line"></div><div class="line">fig,axes = plt.subplots()  </div><div class="line">    </div><div class="line">ims= []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    ims.append(axes.plot(np.random.rand(<span class="number">10</span>)))</div><div class="line"></div><div class="line">im_ani = animation.ArtistAnimation(fig, ims, interval=<span class="number">1000</span>, repeat_delay=<span class="number">3000</span>,</div><div class="line">                                   blit=<span class="keyword">True</span>)</div><div class="line">print(ims)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/matplotlib-base-flash-09-05.gif-blog.photo" alt="matplotlib-base-flash-09-05"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;matplotlib手册(9)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绘制动画 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面，我们介绍了很多绘图的方法，matplotlib不单单可以绘制静态的图，还可以制作动态的图，下面，我们就来学习下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们主要参考matplotlib官网的例子&lt;a href=&quot;http://matplotlib.org/api/animation_api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://matplotlib.org/api/animation_api.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建动画最简单的方式，就是使用Animation的子类,就是下面的这2个&lt;/p&gt;
&lt;h1 id=&quot;1-FuncAnimation&quot;&gt;&lt;a href=&quot;#1-FuncAnimation&quot; class=&quot;headerlink&quot; title=&quot;1. FuncAnimation&quot;&gt;&lt;/a&gt;1. FuncAnimation&lt;/h1&gt;&lt;p&gt;函数介绍及主要参数&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;matplotlib&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;animation&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FuncAnimation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fig, func, frames=None, init_func=None, fargs=None, save_count=None, **kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;fig&lt;/span&gt; :&lt;/span&gt; matplotlib.figure.Figure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func : callable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;frames : iterable, int, generator function, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, optional&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;init_func : callable, optional&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fargs : tuple &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, optional&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;interval : number, optional&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;repeat_delay : number, optional&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;repeat : bool, optional&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据可视化-Python&amp;R" scheme="https://yuguiyang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Python-R/"/>
    
    
      <category term="数据可视化" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Python" scheme="https://yuguiyang.github.io/tags/Python/"/>
    
      <category term="matplotlib" scheme="https://yuguiyang.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>numpy手册(1)-ndarray</title>
    <link href="https://yuguiyang.github.io/2017/08/02/numpy-handbook-01/"/>
    <id>https://yuguiyang.github.io/2017/08/02/numpy-handbook-01/</id>
    <published>2017-08-02T13:59:00.000Z</published>
    <updated>2017-08-27T15:17:55.671Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们算是简单入门了Pandas，numpy也是数据分析中常用的，这里我们也来简单学习下。</p>
<h1 id="1-numpy基本介绍"><a href="#1-numpy基本介绍" class="headerlink" title="1.numpy基本介绍"></a>1.numpy基本介绍</h1><blockquote class="blockquote-center"><br>numpy是Python的一种开源数值计算扩展，这种工具可以用来存储和处理大型矩阵。<br>一个用Python实现的科学计算包。<br>from 百度百科<br></blockquote>

<p>numpy有2种基本对象，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndarray（N-dimensional array object）和 ufunc（universal function object）</div></pre></td></tr></table></figure></p>
<p>ndarray是存储单一数据类型的多维数组，ufunc是能够对数组进行处理的函数。</p>
<a id="more"></a>
<h1 id="2-ndarray"><a href="#2-ndarray" class="headerlink" title="2.ndarray"></a>2.ndarray</h1><p>我们先来看看这个数组<br>首先，我们得引入numpy<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div></pre></td></tr></table></figure></p>
<h2 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h2><p>数组初始化的话有很多方式：Array creation routines<br>我们可以直接使用list来初始化，array有很多的属性，比如大小，维度，元素个数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">b = np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</div><div class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</div><div class="line"></div><div class="line">print(a,type(a),<span class="string">',shape:'</span>,a.shape,<span class="string">',ndim:'</span>,a.ndim,<span class="string">',size:'</span>,a.size)</div><div class="line">print(b,type(b),<span class="string">',shape:'</span>,b.shape,<span class="string">',ndim:'</span>,b.ndim,<span class="string">',size:'</span>,b.size)</div><div class="line">print(c,type(c),<span class="string">',shape:'</span>,c.shape,<span class="string">',ndim:'</span>,c.ndim,<span class="string">',size:'</span>,c.size)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-01.png-blog.photo" alt="numpy-handbook-01-01"></p>
<p>这里呢，我们定义了一维数组和二维数组，比如c，是3行3列的2维数组，元素个数是9个<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.array(object, dtype=<span class="keyword">None</span>, copy=<span class="keyword">True</span>, order=<span class="string">'K'</span>, subok=<span class="keyword">False</span>, ndmin=<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>这里，我们再说下这个shape，这个属性可以修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#原来是4行3列</span></div><div class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>]])</div><div class="line">print(c)</div><div class="line"><span class="comment">#我们改为3行4列</span></div><div class="line">c.shape=(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">print(c)</div><div class="line"><span class="comment">#改为2行6列</span></div><div class="line">c.shape=(<span class="number">2</span>,<span class="number">6</span>)</div><div class="line">print(c)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-02.png-blog.photo" alt="numpy-handbook-01-02"></p>
<p>这里需要注意下，如果某个轴的元素为-1，将根据数组元素的个数，自动计算长度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c.shape=(<span class="number">1</span>,<span class="number">-1</span>)</div><div class="line">print(c)</div><div class="line">c.shape=(<span class="number">-1</span>,<span class="number">1</span>)</div><div class="line">print(c)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-03.png-blog.photo" alt="numpy-handbook-01-03"></p>
<p>这里的shape是改变原来的数组，另一个method，可以创建一个改变shape的新数组，而原数组保持不变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>]])</div><div class="line">print(<span class="string">'c:'</span>,c)</div><div class="line">d = c.reshape(<span class="number">2</span>,<span class="number">6</span>)</div><div class="line">print(<span class="string">'c:'</span>,c)</div><div class="line">print(<span class="string">'d:'</span>,d)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-04.png-blog.photo" alt="numpy-handbook-01-04"></p>
<p>这里要注意的是，c和d共享内存数据存储内存区域，c变了，d也会变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">print(c[<span class="number">0</span>])</div><div class="line"><span class="comment">#修改c[0]</span></div><div class="line">c[<span class="number">0</span>]=[<span class="number">-9</span>,<span class="number">-8</span>,<span class="number">-3</span>]</div><div class="line">print(<span class="string">'c:'</span>,c)</div><div class="line">print(<span class="string">'d:'</span>,d)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-05.png-blog.photo" alt="numpy-handbook-01-05"></p>
<p>我们可以通过dtype来获取元素的类型，我们可以在初始化的时候，指定dtype<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">print(c.dtype) <span class="comment">#int32</span></div><div class="line"></div><div class="line">d = np.array([<span class="number">1.1</span>,<span class="number">3.3</span>])</div><div class="line">print(d.dtype) <span class="comment">#float64</span></div></pre></td></tr></table></figure></p>
<p>下面，我们来看看常用的初始化方法</p>
<h3 id="arange"><a href="#arange" class="headerlink" title="arange"></a>arange</h3><p>通过指定开始值，结束值和步长来创建一维数组，这里不包过终值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arange([start,] stop[, step,], dtype=<span class="keyword">None</span>)</div><div class="line"></div><div class="line">np.arange(<span class="number">3</span>)</div><div class="line">Out[<span class="number">51</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</div><div class="line"></div><div class="line">np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>)</div><div class="line">Out[<span class="number">52</span>]: array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div></pre></td></tr></table></figure></p>
<h3 id="linspace"><a href="#linspace" class="headerlink" title="linspace"></a>linspace</h3><p>通过指定开始值，终值和元素个数，来创建数组，这里包括终值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>)</div><div class="line">Out[<span class="number">53</span>]: array([  <span class="number">1.</span>  ,   <span class="number">3.25</span>,   <span class="number">5.5</span> ,   <span class="number">7.75</span>,  <span class="number">10.</span>  ])</div><div class="line"></div><div class="line">np.linspace(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">Out[<span class="number">54</span>]: array([ <span class="number">1.</span> ,  <span class="number">1.5</span>,  <span class="number">2.</span> ])</div></pre></td></tr></table></figure></p>
<h3 id="np-zeros-np-ones"><a href="#np-zeros-np-ones" class="headerlink" title="np.zeros,np.ones"></a>np.zeros,np.ones</h3><p>这2个函数可以初始化指定长度或形状的全0或全1的数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">np.ones(<span class="number">3</span>)</div><div class="line">Out[<span class="number">202</span>]: array([ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>])</div><div class="line"></div><div class="line">np.ones([<span class="number">2</span>,<span class="number">2</span>])</div><div class="line">Out[<span class="number">203</span>]: </div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>]])</div><div class="line"></div><div class="line">np.zeros(<span class="number">5</span>)</div><div class="line">Out[<span class="number">204</span>]: array([ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>])</div><div class="line"></div><div class="line">np.zeros([<span class="number">4</span>,<span class="number">3</span>])</div><div class="line">Out[<span class="number">205</span>]: </div><div class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]])</div></pre></td></tr></table></figure></p>
<h3 id="np-empty"><a href="#np-empty" class="headerlink" title="np.empty"></a>np.empty</h3><p>可以创建一个没有任何具体值得数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">np.empty(<span class="number">2</span>)</div><div class="line">Out[<span class="number">211</span>]: array([  <span class="number">7.74860419e-304</span>,   <span class="number">7.74860419e-304</span>])</div><div class="line"></div><div class="line">np.empty(<span class="number">2</span>,dtype=int)</div><div class="line">Out[<span class="number">214</span>]: array([        <span class="number">-1</span>, <span class="number">2147483647</span>])</div><div class="line"></div><div class="line">np.empty((<span class="number">3</span>,<span class="number">3</span>),dtype=np.float64)</div><div class="line">Out[<span class="number">215</span>]: </div><div class="line">array([[  <span class="number">4.94065646e-324</span>,   <span class="number">9.88131292e-324</span>,   <span class="number">1.48219694e-323</span>],</div><div class="line">       [  <span class="number">1.97626258e-323</span>,   <span class="number">2.47032823e-323</span>,   <span class="number">2.96439388e-323</span>],</div><div class="line">       [  <span class="number">3.45845952e-323</span>,   <span class="number">3.95252517e-323</span>,   <span class="number">4.44659081e-323</span>]])</div></pre></td></tr></table></figure></p>
<p>这要注意下，empty初始化的都是没有意思的值，不一定会初始化为0</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-06.png-blog.photo" alt="numpy-handbook-01-06"></p>
<h2 id="2-2-存取元素"><a href="#2-2-存取元素" class="headerlink" title="2.2 存取元素"></a>2.2 存取元素</h2><p>这里直接粘贴一个例子，原始教程在这：<a href="http://old.sebug.net/paper/books/scipydoc/numpy_intro.html" target="_blank" rel="external">http://old.sebug.net/paper/books/scipydoc/numpy_intro.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">10</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">5</span>]    <span class="comment"># 用整数作为下标可以获取数组中的某个元素</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:<span class="number">5</span>]  <span class="comment"># 用范围作为下标获取数组的一个切片，包括a[3]不包括a[5]</span></div><div class="line">array([<span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">5</span>]   <span class="comment"># 省略开始下标，表示从a[0]开始</span></div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">-1</span>]  <span class="comment"># 下标可以使用负数，表示从数组后往前数</span></div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">4</span>] = <span class="number">100</span>,<span class="number">101</span>    <span class="comment"># 下标还可以用来修改元素的值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([  <span class="number">0</span>,   <span class="number">1</span>, <span class="number">100</span>, <span class="number">101</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>,   <span class="number">8</span>,   <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">-1</span>:<span class="number">2</span>]   <span class="comment"># 范围中的第三个参数表示步长，2表示隔一个元素取一个元素</span></div><div class="line">array([  <span class="number">1</span>, <span class="number">101</span>,   <span class="number">5</span>,   <span class="number">7</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>] <span class="comment"># 省略范围的开始下标和结束下标，步长为-1，整个数组头尾颠倒</span></div><div class="line">array([  <span class="number">9</span>,   <span class="number">8</span>,   <span class="number">7</span>,   <span class="number">6</span>,   <span class="number">5</span>,   <span class="number">4</span>, <span class="number">101</span>, <span class="number">100</span>,   <span class="number">1</span>,   <span class="number">0</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">5</span>:<span class="number">1</span>:<span class="number">-2</span>] <span class="comment"># 步长为负数时，开始下标必须大于结束下标</span></div><div class="line">array([  <span class="number">5</span>, <span class="number">101</span>])</div></pre></td></tr></table></figure></p>
<p>就2维数组来说</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-07.png-blog.photo" alt="numpy-handbook-01-07"></p>
<p>这是基本的获取方式，还有些高级的方法</p>
<h3 id="使用整数序列"><a href="#使用整数序列" class="headerlink" title="使用整数序列"></a>使用整数序列</h3><p>这里简单来2个练习，原文例子很多，就是通过下标来筛选数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">a = np.arange(<span class="number">-5</span>,<span class="number">5</span>,<span class="number">1</span>)</div><div class="line"></div><div class="line">a</div><div class="line">Out[<span class="number">68</span>]: array([<span class="number">-5</span>, <span class="number">-4</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>])</div><div class="line"></div><div class="line">a[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]]</div><div class="line">Out[<span class="number">69</span>]: array([<span class="number">-4</span>, <span class="number">-2</span>,  <span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="comment">### 使用布尔数组</span></div><div class="line"></div><div class="line">按照传入的布尔数组，只有为<span class="keyword">True</span>的才返回，也叫布尔型索引</div><div class="line">``` python</div><div class="line">a=np.array([<span class="number">-3</span>,<span class="number">1</span>,<span class="number">5</span>])</div><div class="line"></div><div class="line">a</div><div class="line">Out[<span class="number">72</span>]: array([<span class="number">-3</span>,  <span class="number">1</span>,  <span class="number">5</span>])</div><div class="line"></div><div class="line">a[[<span class="keyword">False</span>,<span class="keyword">True</span>,<span class="keyword">False</span>]]</div><div class="line">Out[<span class="number">73</span>]: array([<span class="number">1</span>])</div><div class="line"></div><div class="line">a[[<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">True</span>]]</div><div class="line">Out[<span class="number">74</span>]: array([<span class="number">-3</span>,  <span class="number">5</span>])</div></pre></td></tr></table></figure></p>
<h1 id="3-附录（参考资料）"><a href="#3-附录（参考资料）" class="headerlink" title="3.附录（参考资料）"></a>3.附录（参考资料）</h1><p>文档：<br><a href="https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference" target="_blank" rel="external">https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference</a></p>
<p><a href="http://old.sebug.net/paper/books/scipydoc/numpy_intro.html" target="_blank" rel="external">numpy快速处理数据</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面我们算是简单入门了Pandas，numpy也是数据分析中常用的，这里我们也来简单学习下。&lt;/p&gt;
&lt;h1 id=&quot;1-numpy基本介绍&quot;&gt;&lt;a href=&quot;#1-numpy基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1.numpy基本介绍&quot;&gt;&lt;/a&gt;1.numpy基本介绍&lt;/h1&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;numpy是Python的一种开源数值计算扩展，这种工具可以用来存储和处理大型矩阵。&lt;br&gt;一个用Python实现的科学计算包。&lt;br&gt;from 百度百科&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;numpy有2种基本对象，&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ndarray（N-dimensional array object）和 ufunc（universal function object）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ndarray是存储单一数据类型的多维数组，ufunc是能够对数组进行处理的函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Python-Numpy" scheme="https://yuguiyang.github.io/categories/Python-Numpy/"/>
    
    
      <category term="Python" scheme="https://yuguiyang.github.io/tags/Python/"/>
    
      <category term="Numpy" scheme="https://yuguiyang.github.io/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Cognos资料汇总贴</title>
    <link href="https://yuguiyang.github.io/2017/08/01/cognos-doc-main/"/>
    <id>https://yuguiyang.github.io/2017/08/01/cognos-doc-main/</id>
    <published>2017-08-01T13:59:00.000Z</published>
    <updated>2017-08-27T14:52:03.630Z</updated>
    
    <content type="html"><![CDATA[<p>以前搞过Cognos，写过很多基础的教程，应该是14年的样子，都在CSDN上，这里贴个汇总贴吧，想要看的同学可以去看看，希望有帮助。</p>
<p>ReportStudio入门教程：<a href="http://blog.csdn.net/column/details/ygy-reportstudio.html" target="_blank" rel="external">http://blog.csdn.net/column/details/ygy-reportstudio.html</a></p>
<p>Framework Manage入门教程：<a href="http://blog.csdn.net/column/details/ygy-frameworkmanager.html" target="_blank" rel="external">http://blog.csdn.net/column/details/ygy-frameworkmanager.html</a></p>
<p>Cognos函数手册：<a href="http://blog.csdn.net/column/details/ygy-cognos-function.html" target="_blank" rel="external">http://blog.csdn.net/column/details/ygy-cognos-function.html</a></p>
<p>Cognos相关的其他资料（主页不同的类别下看看）：<a href="http://blog.csdn.net/yuguiyang1990" target="_blank" rel="external">http://blog.csdn.net/yuguiyang1990</a></p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/cognos-doc-main.png-blog.photo" alt="cognos-doc-main.png"></p>
<p>好了，感兴趣的同学，可以自行去看看，好久不搞了，估计有疑问也解决不了了…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前搞过Cognos，写过很多基础的教程，应该是14年的样子，都在CSDN上，这里贴个汇总贴吧，想要看的同学可以去看看，希望有帮助。&lt;/p&gt;
&lt;p&gt;ReportStudio入门教程：&lt;a href=&quot;http://blog.csdn.net/column/details/y
    
    </summary>
    
      <category term="数据可视化-Cognos" scheme="https://yuguiyang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Cognos/"/>
    
    
      <category term="数据可视化" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Cognos" scheme="https://yuguiyang.github.io/tags/Cognos/"/>
    
  </entry>
  
  <entry>
    <title>小白学习Tableau-购物篮分析</title>
    <link href="https://yuguiyang.github.io/2017/08/01/Tableau-handbook-04/"/>
    <id>https://yuguiyang.github.io/2017/08/01/Tableau-handbook-04/</id>
    <published>2017-08-01T02:57:00.000Z</published>
    <updated>2017-09-01T02:40:37.627Z</updated>
    
    <content type="html"><![CDATA[<p>Tableau实例</p>
<blockquote>
<p>关于购物篮的介绍可以参考<a href="https://yuguiyang.github.io/2017/09/01/data-analyst-method-01/">数据分析案例-购物篮分析</a></p>
</blockquote>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>我们想要分析的是顾客在购买商品的时候，哪些商品会同时购买。</p>
<p>下面，我们直接开始开发Tableau</p>
<h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><p>我们就是用Tableau默认自带的“示例-超市”</p>
<h1 id="拖入两张订单表"><a href="#拖入两张订单表" class="headerlink" title="拖入两张订单表"></a>拖入两张订单表</h1><p>因为我们需要分析的是每个顾客，在购买A商品的时候，还会购买哪些商品。只使用一张订单表，不是很容易看出来，所以我们需要拖入2张订单表，以此来更方便的处理数据。<br>因为我们要分析的是每个顾客，所以我们使用顾客ID去关联</p>
<a id="more"></a>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-04-01.png-blog.photo" alt="Tableau-handbook-04-01"></p>
<h1 id="拖子类别进行分析"><a href="#拖子类别进行分析" class="headerlink" title="拖子类别进行分析"></a>拖子类别进行分析</h1><p>我们按照下图所示，进行拖拽<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-04-02.png-blog.photo" alt="Tableau-handbook-04-02"></p>
<h1 id="剔除无效的值"><a href="#剔除无效的值" class="headerlink" title="剔除无效的值"></a>剔除无效的值</h1><p>手工剔除，好麻烦，如果数据是在数据库中，直接用SQL处理掉就可以了</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-04-03.png-blog.photo" alt="Tableau-handbook-04-03"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://tableau.analyticservice.net/%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%98%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%86%E6%9E%90%E5%B8%88%E7%B3%BB%E5%88%97%EF%BC%9A%E7%94%A8tableau%E7%8E%A9%E8%BD%AC%E8%B4%AD%E7%89%A9%E7%AF%AE%E5%88%86%E6%9E%90/" target="_blank" rel="external">人人都是可视化分析师系列：用Tableau玩转购物篮分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tableau实例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于购物篮的介绍可以参考&lt;a href=&quot;https://yuguiyang.github.io/2017/09/01/data-analyst-method-01/&quot;&gt;数据分析案例-购物篮分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;我们想要分析的是顾客在购买商品的时候，哪些商品会同时购买。&lt;/p&gt;
&lt;p&gt;下面，我们直接开始开发Tableau&lt;/p&gt;
&lt;h1 id=&quot;数据源&quot;&gt;&lt;a href=&quot;#数据源&quot; class=&quot;headerlink&quot; title=&quot;数据源&quot;&gt;&lt;/a&gt;数据源&lt;/h1&gt;&lt;p&gt;我们就是用Tableau默认自带的“示例-超市”&lt;/p&gt;
&lt;h1 id=&quot;拖入两张订单表&quot;&gt;&lt;a href=&quot;#拖入两张订单表&quot; class=&quot;headerlink&quot; title=&quot;拖入两张订单表&quot;&gt;&lt;/a&gt;拖入两张订单表&lt;/h1&gt;&lt;p&gt;因为我们需要分析的是每个顾客，在购买A商品的时候，还会购买哪些商品。只使用一张订单表，不是很容易看出来，所以我们需要拖入2张订单表，以此来更方便的处理数据。&lt;br&gt;因为我们要分析的是每个顾客，所以我们使用顾客ID去关联&lt;/p&gt;
    
    </summary>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/categories/Tableau/"/>
    
    
      <category term="数据可视化" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>小白学习Tableau-堆叠条按值排序</title>
    <link href="https://yuguiyang.github.io/2017/07/30/Tableau-handbook-03/"/>
    <id>https://yuguiyang.github.io/2017/07/30/Tableau-handbook-03/</id>
    <published>2017-07-30T12:57:00.000Z</published>
    <updated>2017-08-31T17:37:59.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>昨天学习了下堆叠条形图，刚刚看到个类似的教程，说的是，在堆叠条中按值进行排序，挺有意思的。</p>
<p>又学习到了一招，简单分享下。</p>
<h1 id="按值在堆叠条中对段进行排序"><a href="#按值在堆叠条中对段进行排序" class="headerlink" title="按值在堆叠条中对段进行排序"></a>按值在堆叠条中对段进行排序</h1><p>我们先实现一个简单的堆叠条，</p>
<ul>
<li>使用维度：地区、类别</li>
<li>使用度量：销售额</li>
</ul>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-01.png-blog.photo" alt="Tableau-handbook-03-01"></p>
<a id="more"></a>
<p>下面，我们来看下，是怎样让每个类别的数据块按照销售额排序的。</p>
<p>我们观察下，上面的图，每个地区一个颜色，默认应该是按地区来排序的，每个数据条排序都一样。</p>
<p>我们首先，在颜色“地区”上右键单击，选择“属性”</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-02.png-blog.photo" alt="Tableau-handbook-03-02"></p>
<p>这里的“维度”、“度量”我都可以理解，但是并没有找到“属性”在Tableau中是怎样定义的，按照以前对BI中维度模型的概念来理解的话，</p>
<p>比如，日期维度，包含3个层级，年、月、日，层级月的属性的话，可能是月份名称、月份中文名称等等。<br>我们选完属性之后，会变成这个样子</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-03.png-blog.photo" alt="Tableau-handbook-03-03"></p>
<p>然后，我们选中，维度“类别”和“地区”，创建一个合并字段<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-04.png-blog.photo" alt="Tableau-handbook-03-04"></p>
<p>这个合并字段，是个什么东西呢？其实就是新增了一个联合维度，就是类别和地区的一个笛卡尔积，内容是这样的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-05.png-blog.photo" alt="Tableau-handbook-03-05"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-06.png-blog.photo" alt="Tableau-handbook-03-06"></p>
<p>然后，我们把这个合并字段，拖到详细信息上，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-07.png-blog.photo" alt="Tableau-handbook-03-07"></p>
<p>然后，我们在合并字段上，选择排序<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-08.png-blog.photo" alt="Tableau-handbook-03-08"></p>
<p>我们，依次，选择“降序”，“按销售额来”<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-09.png-blog.photo" alt="Tableau-handbook-03-09"></p>
<p>最后结果，是这样的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-10.png-blog.photo" alt="Tableau-handbook-03-10"></p>
<p>实例呢，在Tableau Public上，<a href="https://public.tableau.com/profile/yuguiyang#!/vizhome/04-_0/sheet2?publish=yes" target="_blank" rel="external">练习04-堆叠条按值排序</a></p>
<p>最后的话，后面还得详细理解下这里用属性和合并字段一起使用的这个操作，有领悟的话，会在分享。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>官方教程：<a href="http://kb.tableau.com/articles/howto/sorting-segments-within-stacked-bars-by-value?lang=zh-cn" target="_blank" rel="external">按值在堆叠条中对段进行排序</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;昨天学习了下堆叠条形图，刚刚看到个类似的教程，说的是，在堆叠条中按值进行排序，挺有意思的。&lt;/p&gt;
&lt;p&gt;又学习到了一招，简单分享下。&lt;/p&gt;
&lt;h1 id=&quot;按值在堆叠条中对段进行排序&quot;&gt;&lt;a href=&quot;#按值在堆叠条中对段进行排序&quot; class=&quot;headerlink&quot; title=&quot;按值在堆叠条中对段进行排序&quot;&gt;&lt;/a&gt;按值在堆叠条中对段进行排序&lt;/h1&gt;&lt;p&gt;我们先实现一个简单的堆叠条，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用维度：地区、类别&lt;/li&gt;
&lt;li&gt;使用度量：销售额&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-03-01.png-blog.photo&quot; alt=&quot;Tableau-handbook-03-01&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/categories/Tableau/"/>
    
    
      <category term="数据可视化" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>小白学习Tableau-堆叠条形图</title>
    <link href="https://yuguiyang.github.io/2017/07/30/Tableau-handbook-02/"/>
    <id>https://yuguiyang.github.io/2017/07/30/Tableau-handbook-02/</id>
    <published>2017-07-30T11:57:00.000Z</published>
    <updated>2017-08-31T17:38:10.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>昨天在看水足迹那个可视化题目的时候，就想做一个堆叠条形图，但是发现只有一个维度，怎么也拖不出来，后来改了下数据源，成功实现了。今天搜到个例子，发现了解决办法，只能说明，还是对Tableau不熟啊，没有能领悟Tableau的内涵。</p>
<h1 id="堆叠条形图"><a href="#堆叠条形图" class="headerlink" title="堆叠条形图"></a>堆叠条形图</h1><p>教程中介绍了2种方法，我们都来实践一下。这里面，最大的收获，就是原来那个“度量名称”和“度量值”是可以拖拽过去使用的，我也是醉了，这个操作得好好研究下，理解下Tableau的机制。</p>
<p>这里的度量名称，应该就是所有度量的一个集合；度量值应该就是“度量名称”集合中选定的度量。</p>
<p>这里我们就用 <a href="http://www.makeovermonday.co.uk/" target="_blank" rel="external">http://www.makeovermonday.co.uk/</a> 上的数据</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-01.png-blog.photo" alt="Tableau-handbook-02-01"></p>
<a id="more"></a>
<h2 id="对每个维度上使用一个单独的条"><a href="#对每个维度上使用一个单独的条" class="headerlink" title="对每个维度上使用一个单独的条"></a>对每个维度上使用一个单独的条</h2><p>首先，我们将“食物”维度，拖到列上，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-02.png-blog.photo" alt="Tableau-handbook-02-02"></p>
<p>然后，我们需要观察的是3种水足迹的值，并让他们显示成堆叠图的样子</p>
<p>我们把度量名称，拖到颜色上<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-03.png-blog.photo" alt="Tableau-handbook-02-03"></p>
<p>因为，我们只看3个水足迹的量，我们就筛选下<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-04.png-blog.photo" alt="Tableau-handbook-02-04"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-05.png-blog.photo" alt="Tableau-handbook-02-05"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-06.png-blog.photo" alt="Tableau-handbook-02-06"></p>
<p>（这个颜色是我之前设置过的，大家操作完，颜色可能和我不一样，但样式是一样的）<br>就这样，我们完成了，列上是每一种食物，然后行上面是选定的3中水足迹，一个简单的堆叠图就完成了。</p>
<h2 id="对每个度量使用一个单独的条"><a href="#对每个度量使用一个单独的条" class="headerlink" title="对每个度量使用一个单独的条"></a>对每个度量使用一个单独的条</h2><p>这个操作其实就是和上面的操作的相反我们将度量名称拖到列上，并筛选<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-07.png-blog.photo" alt="Tableau-handbook-02-07"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-08.png-blog.photo" alt="Tableau-handbook-02-08"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-09.png-blog.photo" alt="Tableau-handbook-02-09"></p>
<p>然后，将度量值拖到行上</p>
<p>最后，将维度，食物拖到颜色上</p>
<p>这样，我们就在3个度量值上，看食物维度的一个堆积情况。<br>好了，堆积图的例子就完成了，主要是理解下Tableau的思想。</p>
<p>小例子，发布在Tableau Public上：<a href="https://public.tableau.com/profile/yuguiyang#!/vizhome/03-/sheet2?publish=yes" target="_blank" rel="external">练习03-堆叠条形图</a></p>
<h1 id="附录（参考资料）"><a href="#附录（参考资料）" class="headerlink" title="附录（参考资料）"></a>附录（参考资料）</h1><p>官方教程：<a href="http://kb.tableau.com/articles/howto/stacked-bar-chart-multiple-measures?lang=zh-cn" target="_blank" rel="external">使用多个度量创建堆叠条形图</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;昨天在看水足迹那个可视化题目的时候，就想做一个堆叠条形图，但是发现只有一个维度，怎么也拖不出来，后来改了下数据源，成功实现了。今天搜到个例子，发现了解决办法，只能说明，还是对Tableau不熟啊，没有能领悟Tableau的内涵。&lt;/p&gt;
&lt;h1 id=&quot;堆叠条形图&quot;&gt;&lt;a href=&quot;#堆叠条形图&quot; class=&quot;headerlink&quot; title=&quot;堆叠条形图&quot;&gt;&lt;/a&gt;堆叠条形图&lt;/h1&gt;&lt;p&gt;教程中介绍了2种方法，我们都来实践一下。这里面，最大的收获，就是原来那个“度量名称”和“度量值”是可以拖拽过去使用的，我也是醉了，这个操作得好好研究下，理解下Tableau的机制。&lt;/p&gt;
&lt;p&gt;这里的度量名称，应该就是所有度量的一个集合；度量值应该就是“度量名称”集合中选定的度量。&lt;/p&gt;
&lt;p&gt;这里我们就用 &lt;a href=&quot;http://www.makeovermonday.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.makeovermonday.co.uk/&lt;/a&gt; 上的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-02-01.png-blog.photo&quot; alt=&quot;Tableau-handbook-02-01&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/categories/Tableau/"/>
    
    
      <category term="数据可视化" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>小白学习Tableau-标签云</title>
    <link href="https://yuguiyang.github.io/2017/07/30/Tableau-handbook-01/"/>
    <id>https://yuguiyang.github.io/2017/07/30/Tableau-handbook-01/</id>
    <published>2017-07-30T10:57:00.000Z</published>
    <updated>2017-08-31T17:21:37.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>周末参加了2天的Tableau培训，发现这个东西做可视化分析还是很方便的，用户体验也很好。<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-01.png-blog.photo" alt="Tableau-handbook-01-01"></p>
<p>也听了很多大师的介绍，受益良多。不管怎样，要开始学些这个Tableau了。之前也有做过IBM Cognos的开发，2个产品对比一下，从直观上来看，就是Tableau的可视化效果好很多，而且还融合了一些分析功能，挺不错的。<br>很久之前就知道了Tableau其实，只是一直都没有去研究她。学习的一开始呢，先是模仿，熟练掌握了Tableau之后，就可以任意发挥了。Tableau入门的话，官方就有很多的资料，挺全的，还有视频教程。</p>
<a id="more"></a>
<h1 id="标签云之作"><a href="#标签云之作" class="headerlink" title="标签云之作"></a>标签云之作</h1><p>这个比较简单，主要参考了jiyang大神的教程，后面有链接<br>我们使用Tableau自带的示例库</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-02.png-blog.photo" alt="Tableau-handbook-01-02"></p>
<p>我们主要就使用“类别”、“子类别”、“销售额”</p>
<h2 id="我们把子类别拖到文本上"><a href="#我们把子类别拖到文本上" class="headerlink" title="我们把子类别拖到文本上"></a>我们把子类别拖到文本上</h2><p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-03.png-blog.photo" alt="Tableau-handbook-01-03"></p>
<p>这里会显示，所有的子类别，然后呢，我们希望子类别可以根据销售额的大小而控制大小</p>
<h2 id="把销售额拖到标记-大小上"><a href="#把销售额拖到标记-大小上" class="headerlink" title="把销售额拖到标记-大小上"></a>把销售额拖到标记-大小上</h2><p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-04.png-blog.photo" alt="Tableau-handbook-01-04"></p>
<p>默认的话，可能会显示这个树状图，但是我们并不想要这样，我们想要显示文本</p>
<p>我们修改下，我们把自动，修改为文本</p>
<p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-05.png-blog.photo" alt="Tableau-handbook-01-05"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-06.png-blog.photo" alt="Tableau-handbook-01-06"></p>
<p>好了，已经可以按销售额的大小来显示子类别的内容了<br>当然，我们一般见到的标签云，都是有颜色的，那我们就继续用销售额的大小来控制颜色</p>
<h2 id="将销售额拖到颜色上"><a href="#将销售额拖到颜色上" class="headerlink" title="将销售额拖到颜色上"></a>将销售额拖到颜色上</h2><p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-07.png-blog.photo" alt="Tableau-handbook-01-07"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-08.png-blog.photo" alt="Tableau-handbook-01-08"></p>
<p>这样呢，我们就用销售额控制了文本的大小和颜色，</p>
<p>一个简单的标签云就实现了</p>
<p>好了，这个例子就是这样简单，小例子，发布在Tableau Public上，</p>
<p><a href="https://public.tableau.com/profile/yuguiyang#!/vizhome/02-/sheet2" target="_blank" rel="external">练习02-销售额标签云</a></p>
<h1 id="附录（参考资料）"><a href="#附录（参考资料）" class="headerlink" title="附录（参考资料）"></a>附录（参考资料）</h1><p>参考学习jiyang大神的作品：<a href="https://public.tableau.com/profile/jiyang#!/vizhome/_3516/sheet0" target="_blank" rel="external">https://public.tableau.com/profile/jiyang#!/vizhome/_3516/sheet0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;周末参加了2天的Tableau培训，发现这个东西做可视化分析还是很方便的，用户体验也很好。&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Tableau-handbook-01-01.png-blog.photo&quot; alt=&quot;Tableau-handbook-01-01&quot;&gt;&lt;/p&gt;
&lt;p&gt;也听了很多大师的介绍，受益良多。不管怎样，要开始学些这个Tableau了。之前也有做过IBM Cognos的开发，2个产品对比一下，从直观上来看，就是Tableau的可视化效果好很多，而且还融合了一些分析功能，挺不错的。&lt;br&gt;很久之前就知道了Tableau其实，只是一直都没有去研究她。学习的一开始呢，先是模仿，熟练掌握了Tableau之后，就可以任意发挥了。Tableau入门的话，官方就有很多的资料，挺全的，还有视频教程。&lt;/p&gt;
    
    </summary>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/categories/Tableau/"/>
    
    
      <category term="数据可视化" scheme="https://yuguiyang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Tableau" scheme="https://yuguiyang.github.io/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（十二）- 控件使用-从步骤插入数据</title>
    <link href="https://yuguiyang.github.io/2017/04/14/Kettle-handbook-12/"/>
    <id>https://yuguiyang.github.io/2017/04/14/Kettle-handbook-12/</id>
    <published>2017-04-14T03:24:44.000Z</published>
    <updated>2017-08-27T14:36:07.845Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍一个控件的小功能，也是最近才发现的，之前在“表输入”中要使用参数的话，一般都是使用变量，<br>其实，还有个功能也可以尝试使用<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-01.png-blog.photo" alt="Kettle-handbook-12-01.png"><br>整体流程就是这样，我们第一个 query_paramter，就是查询了我们想设置的参数<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-02.png-blog.photo" alt="Kettle-handbook-12-02.png"><br>然后，就是我们真正需要的，我们再表输入中，使用 “?”来占位，然后“从步骤插入数据”，选择上一个步骤，然后会将数据替换占位符<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-03.png-blog.photo" alt="Kettle-handbook-12-03.png"><br>最后，我们将文件导出即可，奥对了，我们可以改成日志控件，直接输出查看<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-04.png-blog.photo" alt="Kettle-handbook-12-04.png"><br>刚刚，上面还有一个“执行每一行”，这个就是，如果我们有多个参数，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-05.png-blog.photo" alt="Kettle-handbook-12-05.png"><br>就可以使用这个参数了，很方便，好了，就介绍到这里先。<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-06.png-blog.photo" alt="Kettle-handbook-12-06.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里介绍一个控件的小功能，也是最近才发现的，之前在“表输入”中要使用参数的话，一般都是使用变量，&lt;br&gt;其实，还有个功能也可以尝试使用&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（十一）- 用PGP加密、加密文件</title>
    <link href="https://yuguiyang.github.io/2017/04/11/Kettle-handbook-11/"/>
    <id>https://yuguiyang.github.io/2017/04/11/Kettle-handbook-11/</id>
    <published>2017-04-11T03:24:44.000Z</published>
    <updated>2017-08-27T14:31:04.826Z</updated>
    
    <content type="html"><![CDATA[<p>看到有同学提问，以前也没用过，百度了一下，找了些资料，这里记录下。</p>
<h1 id="1-安装gpg4win"><a href="#1-安装gpg4win" class="headerlink" title="1. 安装gpg4win"></a>1. 安装gpg4win</h1><p>这个gpg4win是干嘛的呢，我们可以去他的官网看看：<a href="https://www.gpg4win.org/index.html" target="_blank" rel="external">gpg4win</a><br>目前，只知道他是加密的，这个是对Windows平台使用的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-01.png-blog.photo" alt="Kettle-handbook-11-01.png"><br>这里可能还有个PGP的概念，看看百度百科<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-02.png-blog.photo" alt="Kettle-handbook-11-02.png"></p>
<a id="more"></a>
<p>好了，具体概念，大家可以自行找找，我们下载下来，然后安装一下即可<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-03.png-blog.photo" alt="Kettle-handbook-11-03.png"><br>这个是昨天安装的，就不粘贴步骤了，安装完后，我们要先创建一个证书的东西，我们打开这个管理界面<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-04.png-blog.photo" alt="Kettle-handbook-11-04.png"><br>打开后，是这样一个界面，（网上有这个的安装配置教程，这里也简单介绍下，不清楚的可以再百度看看）<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-05.png-blog.photo" alt="Kettle-handbook-11-05.png"><br>我们新建一个Certificate<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-06.png-blog.photo" alt="Kettle-handbook-11-06.png"><br>我们选择一个加密方式，使用第一个就可以了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-07.png-blog.photo" alt="Kettle-handbook-11-07.png"><br>我们输入些基本信息然后next就可以<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-08.png-blog.photo" alt="Kettle-handbook-11-08.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-09.png-blog.photo" alt="Kettle-handbook-11-09.png"><br>然后，我们得输入一段密钥<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-10.png-blog.photo" alt="Kettle-handbook-11-10.png"><br>好了，这里，就配置完成了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-11.png-blog.photo" alt="Kettle-handbook-11-11.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-12.png-blog.photo" alt="Kettle-handbook-11-12.png"></p>
<h1 id="2-用PGP加密文件"><a href="#2-用PGP加密文件" class="headerlink" title="2. 用PGP加密文件"></a>2. 用PGP加密文件</h1><p>好了，这里，我们新建一个作业，我们主要使用这2个控件<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-13.png-blog.photo" alt="Kettle-handbook-11-13.png"><br>一个很简单的流程，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-14.png-blog.photo" alt="Kettle-handbook-11-14.png"><br>我们做些简单的配置，<br>一个是GPG的目录（就是我们上面安装的那个）<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-15.png-blog.photo" alt="Kettle-handbook-11-15.png"><br>还有就是，我们的要加密的文件和一个目标文件名，注意，这里我们得填写一下“用户ID”，就是我们前面新建的那个用户名就可以了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-16.png-blog.photo" alt="Kettle-handbook-11-16.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-17.png-blog.photo" alt="Kettle-handbook-11-17.png"><br>这里，可以勾选一下，目标是一个文件<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-18.png-blog.photo" alt="Kettle-handbook-11-18.png"><br>好了，然后，我们执行下就可以了<br>我们源文件：<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-19.png-blog.photo" alt="Kettle-handbook-11-19.png"><br>加密后的文件：<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-20.png-blog.photo" alt="Kettle-handbook-11-20.png"><br>下面，我们再看看，怎样解密</p>
<h1 id="3-用PGP解密文件"><a href="#3-用PGP解密文件" class="headerlink" title="3. 用PGP解密文件"></a>3. 用PGP解密文件</h1><p>知道了加密，解密也是一样的，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-21.png-blog.photo" alt="Kettle-handbook-11-21.png"><br>这里的话，配置和上面差不多，这里，我们要填写一个“密钥”，就是我们上面创建时，输入的一个密码<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-22.png-blog.photo" alt="Kettle-handbook-11-22.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-23.png-blog.photo" alt="Kettle-handbook-11-23.png"><br>我们运行一下，解密后，是一样的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-24.png-blog.photo" alt="Kettle-handbook-11-24.png"><br>好了，就简单介绍到这里</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到有同学提问，以前也没用过，百度了一下，找了些资料，这里记录下。&lt;/p&gt;
&lt;h1 id=&quot;1-安装gpg4win&quot;&gt;&lt;a href=&quot;#1-安装gpg4win&quot; class=&quot;headerlink&quot; title=&quot;1. 安装gpg4win&quot;&gt;&lt;/a&gt;1. 安装gpg4win&lt;/h1&gt;&lt;p&gt;这个gpg4win是干嘛的呢，我们可以去他的官网看看：&lt;a href=&quot;https://www.gpg4win.org/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gpg4win&lt;/a&gt;&lt;br&gt;目前，只知道他是加密的，这个是对Windows平台使用的&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-01.png-blog.photo&quot; alt=&quot;Kettle-handbook-11-01.png&quot;&gt;&lt;br&gt;这里可能还有个PGP的概念，看看百度百科&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-02.png-blog.photo&quot; alt=&quot;Kettle-handbook-11-02.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（十）- 跨库查询</title>
    <link href="https://yuguiyang.github.io/2017/04/10/Kettle-handbook-10/"/>
    <id>https://yuguiyang.github.io/2017/04/10/Kettle-handbook-10/</id>
    <published>2017-04-10T03:24:44.000Z</published>
    <updated>2017-08-27T14:18:29.979Z</updated>
    
    <content type="html"><![CDATA[<p>Kettle整体使用起来，还是很方便的，熟悉应用了之后，就是对控件的熟悉和使用了，只要思路有了，就是整合下Kettle中各个控件的使用就行。<br>这里，简单介绍下一个“跨库查询”的控件。<br>有的时候，我们一个脚本，可能只是临时性的，或者需要实时的去查一下，同步到数仓的话，可能不太方便，我们就可以使用跨库查询的控件<br>用到的表信息<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-01.png-blog.photo" alt="Kettle-handbook-10-01.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-02.png-blog.photo" alt="Kettle-handbook-10-02.png"></p>
<a id="more"></a>
<h1 id="1-数据库连接-Database-Join"><a href="#1-数据库连接-Database-Join" class="headerlink" title="1. 数据库连接(Database Join)"></a>1. 数据库连接(Database Join)</h1><p>我们先用这个控件来实现一下<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-03.png-blog.photo" alt="Kettle-handbook-10-03.png"><br>用起来也很简单<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-04.png-blog.photo" alt="Kettle-handbook-10-04.png"><br>表输入：是我们第一个库中的SQL<br>数据库连接：是我们另一个库的SQL<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-05.png-blog.photo" alt="Kettle-handbook-10-05.png"><br>我们用关联的字段放在where条件后，使用“?”来占位，并在下面，选择要传入的参数<br>默认的话，是JOIN，我们也可以勾选Outer Join，<br>然后，我们看下，输出就行<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-06.png-blog.photo" alt="Kettle-handbook-10-06.png"><br>这是后面导出的文件，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-07.png-blog.photo" alt="Kettle-handbook-10-07.png"><br>这里，我们就简单实现了跨库的查询</p>
<h1 id="2-数据库查询"><a href="#2-数据库查询" class="headerlink" title="2. 数据库查询"></a>2. 数据库查询</h1><p>我们再来看另一个控件，“数据库查询”，这个控件同样可以实现跨库，但是有一个小问题<br>首先，我们使用上一次的数据来看<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-08.png-blog.photo" alt="Kettle-handbook-10-08.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-09.png-blog.photo" alt="Kettle-handbook-10-09.png"><br>我们执行下，结果看上去是一样的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-10.png-blog.photo" alt="Kettle-handbook-10-10.png"><br>这其实有个隐藏的问题，我们再增加几条记录看看<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-11.png-blog.photo" alt="Kettle-handbook-10-11.png"><br>比如：现在1号有2条记录，正常的话，我们导出也是要有2条的<br>我们执行下看看<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-12.png-blog.photo" alt="Kettle-handbook-10-12.png"><br>我们会看到，数据并没有增加，这是控件导致的，<br>先获取左边的结果集，然后一条一条去右边匹配；匹配到第一条记录后，就会跳出，直接去匹配下一个，所以，我们有2条记录，也只会找到第一个。<br>这并不是我们想要的，我们再试下第一个控件<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-13.png-blog.photo" alt="Kettle-handbook-10-13.png"><br>使用这个“数据库查询”控件的话，可以通过将1-N关系汇总，将N的一方，放在前面<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-14.png-blog.photo" alt="Kettle-handbook-10-14.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-15.png-blog.photo" alt="Kettle-handbook-10-15.png"><br>最后的结果也是可以的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-16.png-blog.photo" alt="Kettle-handbook-10-16.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kettle整体使用起来，还是很方便的，熟悉应用了之后，就是对控件的熟悉和使用了，只要思路有了，就是整合下Kettle中各个控件的使用就行。&lt;br&gt;这里，简单介绍下一个“跨库查询”的控件。&lt;br&gt;有的时候，我们一个脚本，可能只是临时性的，或者需要实时的去查一下，同步到数仓的话，可能不太方便，我们就可以使用跨库查询的控件&lt;br&gt;用到的表信息&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-01.png-blog.photo&quot; alt=&quot;Kettle-handbook-10-01.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-02.png-blog.photo&quot; alt=&quot;Kettle-handbook-10-02.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（九）- 发送邮件</title>
    <link href="https://yuguiyang.github.io/2017/03/30/Kettle-handbook-09/"/>
    <id>https://yuguiyang.github.io/2017/03/30/Kettle-handbook-09/</id>
    <published>2017-03-30T03:24:44.000Z</published>
    <updated>2017-08-27T14:05:09.684Z</updated>
    
    <content type="html"><![CDATA[<p>在Kettle里面，我们每天执行完调度之后，想要监控下JOB的执行状态，通常我们可以会发送邮件，可以的话，还可以发送短信。</p>
<p>在Kettle里面，发送邮件很方便，这里，我们就简单的测试下。</p>
<h1 id="1-在作业中发送简单邮件"><a href="#1-在作业中发送简单邮件" class="headerlink" title="1. 在作业中发送简单邮件"></a>1. 在作业中发送简单邮件</h1><p>我们只需要使用到这个控件就可以了，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-01.png-blog.photo" alt="Kettle-handbook-09-01.png"><br>这样，一个简单的发送邮件流程就好了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-02.png-blog.photo" alt="Kettle-handbook-09-02.png"></p>
<a id="more"></a>
<p>控件的配置：<br>收件人，抄送啊，信息，自行填写就行，多个收件人，使用“空格”分隔<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-03.png-blog.photo" alt="Kettle-handbook-09-03.png"><br>在服务器这里，我们填上服务器的信息就可以了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-04.png-blog.photo" alt="Kettle-handbook-09-04.png"><br>这里是邮件消息的一些配置，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-05.png-blog.photo" alt="Kettle-handbook-09-05.png"><br>暂时先到这里，我们测试下结果<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-06.png-blog.photo" alt="Kettle-handbook-09-06.png"><br>然后，查看邮箱，我们会接收到这个邮件，刚刚简单测了下这个“回复名称”，就是<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-07.png-blog.photo" alt="Kettle-handbook-09-07.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-08.png-blog.photo" alt="Kettle-handbook-09-08.png"><br>这里试过中文，会有问题，有乱码，可能是Windows下的原因，没有再去测试验证<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-09.png-blog.photo" alt="Kettle-handbook-09-09.png"><br>就是收到邮件时的一个发件人的名称，不同邮箱显示的不一样</p>
<h1 id="2-增加附件"><a href="#2-增加附件" class="headerlink" title="2. 增加附件"></a>2. 增加附件</h1><p>附件的话，也很简单，上面的面板中直接配置就可以了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-10.png-blog.photo" alt="Kettle-handbook-09-10.png"><br>然后，我们需要将待发送的邮件，添加到结果集中<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-11.png-blog.photo" alt="Kettle-handbook-09-11.png"><br>在控件中，我们添加好文件就行了。<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-12.png-blog.photo" alt="Kettle-handbook-09-12.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-13.png-blog.photo" alt="Kettle-handbook-09-13.png"><br>我们再次发送，验证下<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-14.png-blog.photo" alt="Kettle-handbook-09-14.png"><br>好了，附件也可以了，思路就是这样的，实际应用时，可能还有些问题得注意下</p>
<h1 id="3-自定义邮件内容"><a href="#3-自定义邮件内容" class="headerlink" title="3. 自定义邮件内容"></a>3. 自定义邮件内容</h1><p>到这里，我们会看到，邮件的正文内容，可能并不是我们想要的， 我们想要的可能是这样的信息<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-15.png-blog.photo" alt="Kettle-handbook-09-15.png"><br>这就需要自定义正文内容，我们需要勾选下面这个选项<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-16.png-blog.photo" alt="Kettle-handbook-09-16.png"><br>这里是可以使用变量的，我们可以拼接HTML来实现<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-17.png-blog.photo" alt="Kettle-handbook-09-17.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-18.png-blog.photo" alt="Kettle-handbook-09-18.png"><br>好了，邮件的介绍，大概就这些，在转换中，也是可以使用的，大同小异</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Kettle里面，我们每天执行完调度之后，想要监控下JOB的执行状态，通常我们可以会发送邮件，可以的话，还可以发送短信。&lt;/p&gt;
&lt;p&gt;在Kettle里面，发送邮件很方便，这里，我们就简单的测试下。&lt;/p&gt;
&lt;h1 id=&quot;1-在作业中发送简单邮件&quot;&gt;&lt;a href=&quot;#1-在作业中发送简单邮件&quot; class=&quot;headerlink&quot; title=&quot;1. 在作业中发送简单邮件&quot;&gt;&lt;/a&gt;1. 在作业中发送简单邮件&lt;/h1&gt;&lt;p&gt;我们只需要使用到这个控件就可以了，&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-01.png-blog.photo&quot; alt=&quot;Kettle-handbook-09-01.png&quot;&gt;&lt;br&gt;这样，一个简单的发送邮件流程就好了&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-02.png-blog.photo&quot; alt=&quot;Kettle-handbook-09-02.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（八）- 循环</title>
    <link href="https://yuguiyang.github.io/2017/03/29/Kettle-handbook-08/"/>
    <id>https://yuguiyang.github.io/2017/03/29/Kettle-handbook-08/</id>
    <published>2017-03-29T15:40:44.000Z</published>
    <updated>2017-08-27T13:47:04.004Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候，我们想要在Kettle中实现这个循环的功能，比如，批量加载数据的时候，我们要对10张表执行同样的操作，只有表名和一些信息不一样，这时，写个循环就省事儿多了</p>
<h1 id="1-遍历结果集实现"><a href="#1-遍历结果集实现" class="headerlink" title="1. 遍历结果集实现"></a>1. 遍历结果集实现</h1><p><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-01.png-blog.photo" alt="Kettle-handbook-08-01.png"><br>这里的话，我们主要是通过一个将结果集返回，然后通过转换的设置来实现的</p>
<a id="more"></a>
<h2 id="1-1-query-the-result"><a href="#1-1-query-the-result" class="headerlink" title="1.1 query_the_result"></a>1.1 query_the_result</h2><p>这个转换，只要是将我们要遍历的结果集返回，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-02.png-blog.photo" alt="Kettle-handbook-08-02.png"><br>表输入，我们就是返回了5条记录，来做遍历<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-03.png-blog.photo" alt="Kettle-handbook-08-03.png"><br>复制记录到结果，这个控件的作用，就是我们可以在后面的转换继续使用这个结果集。</p>
<p>##1.2 traverse_the_result<br>这里呢，我们就是需要遍历的转换了，这里，我们只是获取结果集，然后将结果集输出<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-04.png-blog.photo" alt="Kettle-handbook-08-04.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-05.png-blog.photo" alt="Kettle-handbook-08-05.png"><br>还有一个很重要的一步，怎样让这个转换可以根据结果集的条数，去循环执行呢？<br>就是这个“执行每一个输入行”<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-06.png-blog.photo" alt="Kettle-handbook-08-06.png"><br>我们执行下看看<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-07.png-blog.photo" alt="Kettle-handbook-08-07.png"></p>
<h1 id="2-使用JS实现"><a href="#2-使用JS实现" class="headerlink" title="2. 使用JS实现"></a>2. 使用JS实现</h1><p>网上有很多的例子，介绍怎样用JS来控制循环，这里我们也简单的测试下<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-08.png-blog.photo" alt="Kettle-handbook-08-08.png"></p>
<h2 id="2-1-query-the-result"><a href="#2-1-query-the-result" class="headerlink" title="2.1 query_the_result"></a>2.1 query_the_result</h2><p>这一步，和上面的一样，就是将结果集返回<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-09.png-blog.photo" alt="Kettle-handbook-08-09.png"></p>
<h2 id="2-2-travers-the-result"><a href="#2-2-travers-the-result" class="headerlink" title="2.2 travers_the_result"></a>2.2 travers_the_result</h2><p>这里主要是使用JS将结果集进行遍历，通过JS，将一些结果存放到变量里面，在后面的操作中就可以使用了，通过${xxx}的方式使用<br>这个其实和Java、JS里面循环思路一样，通过结果集的总数“total_num”和下标“LoopCounter”进行判断<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-10.png-blog.photo" alt="Kettle-handbook-08-10.png"></p>
<h2 id="2-3-evaluate-the-loop-count"><a href="#2-3-evaluate-the-loop-count" class="headerlink" title="2.3 evaluate_the_loop_count"></a>2.3 evaluate_the_loop_count</h2><p>这一步，就是判断下标的值和结果集的总数，进行对比，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-11.png-blog.photo" alt="Kettle-handbook-08-11.png"></p>
<h2 id="2-4-print-the-log"><a href="#2-4-print-the-log" class="headerlink" title="2.4 print_the_log"></a>2.4 print_the_log</h2><p>输出下，我们想要使用的变量<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-12.png-blog.photo" alt="Kettle-handbook-08-12.png"></p>
<h2 id="2-5-manage-the-loop-index"><a href="#2-5-manage-the-loop-index" class="headerlink" title="2.5 manage_the_loop_index"></a>2.5 manage_the_loop_index</h2><p>这一步，给下标加一，然后获取下一条记录<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-13.png-blog.photo" alt="Kettle-handbook-08-13.png"><br>好了，执行下，我们看看<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-14.png-blog.photo" alt="Kettle-handbook-08-14.png"><br>好了，循环的使用先介绍到这里</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候，我们想要在Kettle中实现这个循环的功能，比如，批量加载数据的时候，我们要对10张表执行同样的操作，只有表名和一些信息不一样，这时，写个循环就省事儿多了&lt;/p&gt;
&lt;h1 id=&quot;1-遍历结果集实现&quot;&gt;&lt;a href=&quot;#1-遍历结果集实现&quot; class=&quot;headerlink&quot; title=&quot;1. 遍历结果集实现&quot;&gt;&lt;/a&gt;1. 遍历结果集实现&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-01.png-blog.photo&quot; alt=&quot;Kettle-handbook-08-01.png&quot;&gt;&lt;br&gt;这里的话，我们主要是通过一个将结果集返回，然后通过转换的设置来实现的&lt;/p&gt;
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（七）- 资源库的使用</title>
    <link href="https://yuguiyang.github.io/2017/03/29/Kettle-handbook-07/"/>
    <id>https://yuguiyang.github.io/2017/03/29/Kettle-handbook-07/</id>
    <published>2017-03-29T15:24:44.000Z</published>
    <updated>2017-08-27T13:28:47.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-为什么使用资源库"><a href="#1-为什么使用资源库" class="headerlink" title="1. 为什么使用资源库"></a>1. 为什么使用资源库</h1><p>之前，我们新建转换或者作业的时候，都是直接保存在本地，而如果我们是多人开发的话，除了使用SVN等版本控制软件，还可以使用Kettle的资源库，他会将转换、作业直接保存在数据库中，而且，连接资源库的话，我们就不需要每一次都新建数据库连接了，用起来还是蛮方便的。</p>
<h1 id="2-新建资源库"><a href="#2-新建资源库" class="headerlink" title="2. 新建资源库"></a>2. 新建资源库</h1><p>Kettle7.0里面，是在右上角这个Connect来连接的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-01.png-blog.photo" alt="Kettle-handbook-07-01.png"></p>
<a id="more"></a>
<h2 id="2-1-资源库的类型"><a href="#2-1-资源库的类型" class="headerlink" title="2.1 资源库的类型"></a>2.1 资源库的类型</h2><p>资源库有3中类型<br>Pentaho Repository<br>Database Repository（使用数据库存储）<br>File Repository（使用文件存储）<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-02.png-blog.photo" alt="Kettle-handbook-07-02.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-03.png-blog.photo" alt="Kettle-handbook-07-03.png"></p>
<h2 id="2-2-新建Pentaho-Repository"><a href="#2-2-新建Pentaho-Repository" class="headerlink" title="2.2 新建Pentaho Repository"></a>2.2 新建Pentaho Repository</h2><p>我们单击上面的get started 之后，就会进入新建界面<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-04.png-blog.photo" alt="Kettle-handbook-07-04.png"><br><a href="http://localhost:8080/pentaho" target="_blank" rel="external">http://localhost:8080/pentaho</a><br>一开始还没搞懂这个Server到底怎么启动，后来google了半天发现<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-05.png-blog.photo" alt="Kettle-handbook-07-05.png"><br>后来又找到了这个，应该是要安装其他的组件才行，这个类型的库就放弃吧。。<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-06.png-blog.photo" alt="Kettle-handbook-07-06.png"></p>
<h2 id="2-3-Database-Repository"><a href="#2-3-Database-Repository" class="headerlink" title="2.3 Database Repository"></a>2.3 Database Repository</h2><p>好了，这回，我们选择哪个database的资源库<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-07.png-blog.photo" alt="Kettle-handbook-07-07.png"><br>我们填一个connection的名字，然后配置一个资源库的连接就可以了，最好给kettle新建一个数据库使用<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-08.png-blog.photo" alt="Kettle-handbook-07-08.png"><br>至于数据库连接的话，和转换里面是一样的，大家可以自行新建一个<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-09.png-blog.photo" alt="Kettle-handbook-07-09.png"><br>配置好，以后，大家选择Finish就可以了，然后，我们可以连接下这个库，注意下，这里的用户名和密码，<br>默认是admin/admin，大家直接登录就好了，这是Kettle自己初始化的<br>这个怎么改呢，暂时还没有发现，待研究，等我再google看看，估计官网上会有。<br>（找了下，发现了在哪改密码，就是刚刚的搜索资源库<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-10.png-blog.photo" alt="Kettle-handbook-07-10.png"><br>)<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-11.png-blog.photo" alt="Kettle-handbook-07-11.png"><br>连接后，我们正常使用就好了，没啥两样，会多一些功能，比如，探索资源库这里<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-12.png-blog.photo" alt="Kettle-handbook-07-12.png"><br>我们再保存作业和转换的话，会直接保存在数据库中，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-13.png-blog.photo" alt="Kettle-handbook-07-13.png"><br>而且，很好的一个功能，个人感觉，就是数据库连接只需要创建一次，在哪里都可以用了，不需要再次创建。</p>
<h2 id="2-4-File-Repository"><a href="#2-4-File-Repository" class="headerlink" title="2.4 File Repository"></a>2.4 File Repository</h2><p>这个和database的资源库，就差不多了，只不过是基于文件的，保存在本地就可以了<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-14.png-blog.photo" alt="Kettle-handbook-07-14.png"><br>这个就和Eclipse一个工作区差不多，转换、作业都保存在这个目录下<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-15.png-blog.photo" alt="Kettle-handbook-07-15.png"><br>好了，关于资源库，就简单的说这些了，大家可以自行连接，试试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-为什么使用资源库&quot;&gt;&lt;a href=&quot;#1-为什么使用资源库&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么使用资源库&quot;&gt;&lt;/a&gt;1. 为什么使用资源库&lt;/h1&gt;&lt;p&gt;之前，我们新建转换或者作业的时候，都是直接保存在本地，而如果我们是多人开发的话，除了使用SVN等版本控制软件，还可以使用Kettle的资源库，他会将转换、作业直接保存在数据库中，而且，连接资源库的话，我们就不需要每一次都新建数据库连接了，用起来还是蛮方便的。&lt;/p&gt;
&lt;h1 id=&quot;2-新建资源库&quot;&gt;&lt;a href=&quot;#2-新建资源库&quot; class=&quot;headerlink&quot; title=&quot;2. 新建资源库&quot;&gt;&lt;/a&gt;2. 新建资源库&lt;/h1&gt;&lt;p&gt;Kettle7.0里面，是在右上角这个Connect来连接的&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-01.png-blog.photo&quot; alt=&quot;Kettle-handbook-07-01.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Kettle手册（六）- Hop小记</title>
    <link href="https://yuguiyang.github.io/2017/03/29/Kettle-handbook-06/"/>
    <id>https://yuguiyang.github.io/2017/03/29/Kettle-handbook-06/</id>
    <published>2017-03-29T14:24:44.000Z</published>
    <updated>2017-08-27T13:10:27.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Hop"><a href="#1-什么是Hop" class="headerlink" title="1. 什么是Hop"></a>1. 什么是Hop</h1><p>在我们前面，使用Kettle过程中，控件与控件之间的连线，这里，我们详细介绍下它，它在Kettle中叫Hop（跳）。<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-01.png-blog.photo" alt="Kettle-handbook-06-01.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-02.png-blog.photo" alt="Kettle-handbook-06-02.png"></p>
<a id="more"></a>
<h1 id="2-Hop的发送方式（转换）"><a href="#2-Hop的发送方式（转换）" class="headerlink" title="2. Hop的发送方式（转换）"></a>2. Hop的发送方式（转换）</h1><p>在转换中，一般情况，控件和控件之间只有一个Hop，当然，如果需要的话，我们拖了2个控件出来，像这样：<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-03.png-blog.photo" alt="Kettle-handbook-06-03.png"><br>Kettle会提示你，下面的信息，让你选择，数据发送的方式<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-04.png-blog.photo" alt="Kettle-handbook-06-04.png"></p>
<h2 id="2-1-分发记录"><a href="#2-1-分发记录" class="headerlink" title="2.1 分发记录"></a>2.1 分发记录</h2><p>目标步骤轮流接收记录，其实就是你一条，我一条，轮着接收数据，这个我们试一下就知道了，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-05.png-blog.photo" alt="Kettle-handbook-06-05.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-06.png-blog.photo" alt="Kettle-handbook-06-06.png"><br>我们执行下，看看这个结果试试，我们再步骤度量中，可以看到，a.txt和b.txt分别写入的数量<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-07.png-blog.photo" alt="Kettle-handbook-06-07.png"><br>看看结果文件，就是这样的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-08.png-blog.photo" alt="Kettle-handbook-06-08.png"></p>
<h2 id="2-2-复制记录"><a href="#2-2-复制记录" class="headerlink" title="2.2 复制记录"></a>2.2 复制记录</h2><p>所有记录同时发送到所有的目标步骤，这个看起来就简单多了，比如上面的例子，2个文本文件会接收到同样的所有的数据，我们也试一下<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-09.png-blog.photo" alt="Kettle-handbook-06-09.png"><br>结果文件的话，就是2个节点，接收到的数据都是一样的<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-10.png-blog.photo" alt="Kettle-handbook-06-10.png"></p>
<h1 id="3-Hop的状态（作业）"><a href="#3-Hop的状态（作业）" class="headerlink" title="3.Hop的状态（作业）"></a>3.Hop的状态（作业）</h1><p>在作业中，Hop主要用来控制流程<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-11.png-blog.photo" alt="Kettle-handbook-06-11.png"><br>有3种状态，一个锁，一个绿色的对号，一个红色的叉号<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-12.png-blog.photo" alt="Kettle-handbook-06-12.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-13.png-blog.photo" alt="Kettle-handbook-06-13.png"><br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-14.png-blog.photo" alt="Kettle-handbook-06-14.png"><br>简单来说，<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-15.png-blog.photo" alt="Kettle-handbook-06-15.png">：表示无论上一步执行成功还是失败，都一定会执行下一步<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-16.png-blog.photo" alt="Kettle-handbook-06-16.png">：表示上一步执行成功才会执行下一步<br><img src="http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-17.png-blog.photo" alt="Kettle-handbook-06-17.png">：表示上一步执行失败执行下一步<br>比如我们上面的例子，我们的转换执行成功后，就结束了，如果转换执行失败了，我们就发送邮件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-什么是Hop&quot;&gt;&lt;a href=&quot;#1-什么是Hop&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Hop&quot;&gt;&lt;/a&gt;1. 什么是Hop&lt;/h1&gt;&lt;p&gt;在我们前面，使用Kettle过程中，控件与控件之间的连线，这里，我们详细介绍下它，它在Kettle中叫Hop（跳）。&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-01.png-blog.photo&quot; alt=&quot;Kettle-handbook-06-01.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-02.png-blog.photo&quot; alt=&quot;Kettle-handbook-06-02.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ETL-Kettle" scheme="https://yuguiyang.github.io/categories/ETL-Kettle/"/>
    
    
      <category term="Kettle" scheme="https://yuguiyang.github.io/tags/Kettle/"/>
    
  </entry>
  
</feed>
